Index: b/plugins/keyboard/csd-keyboard-manager.c
===================================================================
--- a/plugins/keyboard/csd-keyboard-manager.c
+++ b/plugins/keyboard/csd-keyboard-manager.c
@@ -78,12 +78,16 @@
 #define KEY_BELL_DURATION  "bell-duration"
 #define KEY_BELL_MODE      "bell-mode"
 
+#define LIBGNOMEKBD_KEYBOARD_DIR "org.gnome.libgnomekbd.keyboard"
+#define LIBGNOMEKBD_KEY_LAYOUTS  "layouts"
+
 #define DEFAULT_LANGUAGE "en_US"
 
 struct CsdKeyboardManagerPrivate
 {
     guint      start_idle_id;
         GSettings *settings;
+        GSettings *libgnomekbd_settings;
         gint       xkb_event_base;
         CsdNumLockState old_state;
         GdkDeviceManager *device_manager;
@@ -1021,6 +1025,93 @@
         manager->priv->device_manager = device_manager;
 }
 
+static void
+apply_libgnomekbd_settings (GSettings          *settings,
+                            const char         *key,
+                            CsdKeyboardManager *manager)
+{
+        gchar **layouts;
+
+        layouts = g_settings_get_strv  (settings, LIBGNOMEKBD_KEY_LAYOUTS);
+
+        /* Get accounts daemon */
+        GDBusProxy *proxy = NULL;
+        GDBusProxy *user = NULL;
+        GVariant *variant = NULL;
+        GError *error = NULL;
+        gchar *object_path = NULL;
+
+        proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
+                                               G_DBUS_PROXY_FLAGS_NONE,
+                                               NULL,
+                                               "org.freedesktop.Accounts",
+                                               "/org/freedesktop/Accounts",
+                                               "org.freedesktop.Accounts",
+                                               NULL,
+                                               &error);
+
+        if (proxy == NULL) {
+                g_warning ("Failed to contact accounts service: %s", error->message);
+                g_error_free (error);
+                goto bail;
+        }
+
+        variant = g_dbus_proxy_call_sync (proxy,
+                                          "FindUserByName",
+                                          g_variant_new ("(s)", g_get_user_name ()),
+                                          G_DBUS_CALL_FLAGS_NONE,
+                                          -1,
+                                          NULL,
+                                          &error);
+
+        if (variant == NULL) {
+                g_warning ("Could not contact accounts service to look up '%s': %s",
+                           g_get_user_name (), error->message);
+                g_error_free (error);
+                goto bail;
+        }
+
+        g_variant_get (variant, "(o)", &object_path);
+        user = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
+                                              G_DBUS_PROXY_FLAGS_NONE,
+                                              NULL,
+                                              "org.freedesktop.Accounts",
+                                              object_path,
+                                              "org.freedesktop.Accounts.User",
+                                              NULL,
+                                              &error);
+        g_free (object_path);
+
+        if (user == NULL) {
+                g_warning ("Could not create proxy for user '%s': %s",
+                           g_variant_get_string (variant, NULL), error->message);
+                g_error_free (error);
+                goto bail;
+        }
+        g_variant_unref (variant);
+
+        variant = g_dbus_proxy_call_sync (user,
+                                          "SetXKeyboardLayouts",
+                                          g_variant_new ("(^as)", layouts),
+                                          G_DBUS_CALL_FLAGS_NONE,
+                                          -1,
+                                          NULL,
+                                          &error);
+
+        if (variant == NULL) {
+                g_warning ("Failed to set the keyboard layouts: %s", error->message);
+                g_error_free (error);
+                goto bail;
+        }
+
+bail:
+        if (proxy != NULL)
+                g_object_unref (proxy);
+        if (variant != NULL)
+                g_variant_unref (variant);
+        g_strfreev (layouts);
+}
+
 static gboolean
 start_keyboard_idle_cb (CsdKeyboardManager *manager)
 {
@@ -1029,6 +1120,7 @@
         g_debug ("Starting keyboard manager");
 
         manager->priv->settings = g_settings_new (CSD_KEYBOARD_DIR);
+        manager->priv->libgnomekbd_settings = g_settings_new (LIBGNOMEKBD_KEYBOARD_DIR);
 	manager->priv->settings_desktop = g_settings_new (GKBD_DESKTOP_SCHEMA);
 	manager->priv->settings_keyboard = g_settings_new (GKBD_KEYBOARD_SCHEMA);
 
@@ -1047,6 +1139,10 @@
 	g_signal_connect (manager->priv->settings_keyboard, "changed",
 			  (GCallback) xkb_settings_changed, manager);
 
+        apply_libgnomekbd_settings (manager->priv->libgnomekbd_settings, NULL, manager);
+        g_signal_connect (G_OBJECT (manager->priv->libgnomekbd_settings), "changed",
+                          G_CALLBACK (apply_libgnomekbd_settings), manager);
+
 	install_xkb_filter (manager);
 
         sagarmatha_settings_profile_end (NULL);
@@ -1119,6 +1215,11 @@
 		p->xkl_engine = NULL;
 	}
 
+    if (p->libgnomekbd_settings != NULL) {
+        g_object_unref(p->libgnomekbd_settings);
+        p->libgnomekbd_settings = NULL;
+    }
+
 #ifdef HAVE_APPINDICATOR
     if (p->gkbd_configuration != NULL) {
 	    g_object_unref (p->gkbd_configuration);
