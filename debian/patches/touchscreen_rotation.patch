## Description: correctly set up input coordinates when rotating touchscreens
## Origin/Author: jani@ubuntu.com
## Bug: https://bugzilla.gnome.org/show_bug.cgi?id=691691
Index: sagarmatha-settings-daemon-3.6.4/plugins/xrandr/csd-xrandr-manager.c
===================================================================
--- sagarmatha-settings-daemon-3.6.4.orig/plugins/xrandr/csd-xrandr-manager.c	2013-01-10 15:37:58.000000000 +0200
+++ sagarmatha-settings-daemon-3.6.4/plugins/xrandr/csd-xrandr-manager.c	2013-01-29 16:28:08.946019381 +0200
@@ -1492,15 +1492,16 @@
 
 struct {
         GnomeRRRotation rotation;
-        /* evdev */
-        gboolean x_axis_inversion;
-        gboolean y_axis_inversion;
-        gboolean axes_swap;
+        gfloat matrix[9];
 } evdev_rotations[] = {
-        { GNOME_RR_ROTATION_0, 0, 0, 0 },
-        { GNOME_RR_ROTATION_90, 1, 0, 1 },
-        { GNOME_RR_ROTATION_180, 1, 1, 0 },
-        { GNOME_RR_ROTATION_270, 0, 1, 1 }
+        { GNOME_RR_ROTATION_0,
+                                 {1, 0, 0, 0, 1, 0, 0, 0, 1}},
+        { GNOME_RR_ROTATION_90,
+                                 {0, -1, 1, 1, 0, 0, 0, 0, 1}},
+        { GNOME_RR_ROTATION_180,
+                                 {-1, 0, 1, 0, -1, 1, 0, 0, 1}},
+        { GNOME_RR_ROTATION_270,
+                                 {0, 1, 0, -1, 0, 1, 0,  0, 1}}
 };
 
 static guint
@@ -1556,6 +1557,7 @@
         XDeviceInfo *device_info;
         gint n_devices;
         guint i, rot_idx;
+        Atom float_atom = XInternAtom(GDK_DISPLAY_XDISPLAY(gdk_display_get_default()), "FLOAT", True);
 
         if (!supports_xinput_devices ())
                 return;
@@ -1576,13 +1578,13 @@
 
                 if (device_info_is_touchscreen (&device_info[i])) {
                         XDevice *device;
-                        char c = evdev_rotations[rot_idx].axes_swap;
-                        PropertyHelper axes_swap = {
-                                .name = "Evdev Axes Swap",
-                                .nitems = 1,
-                                .format = 8,
-                                .type   = XA_INTEGER,
-                                .data.c = &c,
+                        gfloat *m = evdev_rotations[rot_idx].matrix;
+                        PropertyHelper matrix = {
+                                .name = "Coordinate Transformation Matrix",
+                                .nitems = 9,
+                                .format = 32,
+                                .type = float_atom,
+                                .data.i = (int *)m,
                         };
 
                         g_debug ("About to rotate '%s'", device_info[i].name);
@@ -1592,26 +1594,18 @@
                         if (gdk_error_trap_pop () || (device == NULL))
                                 continue;
 
-                        if (device_set_property (device, device_info[i].name, &axes_swap) != FALSE) {
-                                char axis[] = {
-                                        evdev_rotations[rot_idx].x_axis_inversion,
-                                        evdev_rotations[rot_idx].y_axis_inversion
-                                };
-                                PropertyHelper axis_invert = {
-                                        .name = "Evdev Axis Inversion",
-                                        .nitems = 2,
-                                        .format = 8,
-                                        .type   = XA_INTEGER,
-                                        .data.c = axis,
-                                };
-
-                                device_set_property (device, device_info[i].name, &axis_invert);
-
-                                g_debug ("Rotated '%s' to configuration '%d, %d, %d'",
+                        if (device_set_property (device, device_info[i].name, &matrix) != FALSE) {
+                                g_print ("Rotated '%s' to configuration '%f, %f, %f, %f, %f, %f, %f, %f, %f'\n",
                                          device_info[i].name,
-                                         evdev_rotations[rot_idx].x_axis_inversion,
-                                         evdev_rotations[rot_idx].y_axis_inversion,
-                                         evdev_rotations[rot_idx].axes_swap);
+                                         evdev_rotations[rot_idx].matrix[0],
+                                         evdev_rotations[rot_idx].matrix[1],
+                                         evdev_rotations[rot_idx].matrix[2],
+                                         evdev_rotations[rot_idx].matrix[3],
+                                         evdev_rotations[rot_idx].matrix[4],
+                                         evdev_rotations[rot_idx].matrix[5],
+                                         evdev_rotations[rot_idx].matrix[6],
+                                         evdev_rotations[rot_idx].matrix[7],
+                                         evdev_rotations[rot_idx].matrix[8]);
                         }
 
                         XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), device);
