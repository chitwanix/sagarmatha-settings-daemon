Index: sagarmatha-settings-daemon-3.6.4/configure.ac
===================================================================
--- sagarmatha-settings-daemon-3.6.4.orig/configure.ac	2013-02-18 12:57:16.535698777 +0000
+++ sagarmatha-settings-daemon-3.6.4/configure.ac	2013-02-18 12:57:16.511698776 +0000
@@ -54,7 +54,6 @@
 LIBWACOM_REQUIRED_VERSION=0.6
 UPOWER_REQUIRED_VERSION=0.9.11
 APPINDICATOR_REQUIRED_VERSION=0.3.0
-IBUS_REQUIRED_VERSION=1.4.99
 
 EXTRA_COMPILE_WARNINGS(yes)
 
@@ -204,21 +203,8 @@
 dnl - Keyboard plugin stuff
 dnl ---------------------------------------------------------------------------
 
-AC_ARG_ENABLE(ibus,
-        AS_HELP_STRING([--disable-ibus],
-                       [Disable IBus support]),
-        enable_ibus=$enableval,
-        enable_ibus=yes)
-
-if test "x$enable_ibus" = "xyes" ; then
-        IBUS_MODULE="ibus-1.0 >= $IBUS_REQUIRED_VERSION"
-        AC_DEFINE(HAVE_IBUS, 1, [Defined if IBus support is enabled])
-else
-        IBUS_MODULE=
-fi
-AM_CONDITIONAL(HAVE_IBUS, test "x$enable_ibus" == "xyes")
-
-PKG_CHECK_MODULES(KEYBOARD, xkbfile $IBUS_MODULE gnome-desktop-3.0 >= $GNOME_DESKTOP_REQUIRED_VERSION)
+LIBGNOMEKBD_REQUIRED=2.91.1
+PKG_CHECK_MODULES(KEYBOARD, [libgnomekbdui >= $LIBGNOMEKBD_REQUIRED libgnomekbd >= $LIBGNOMEKBD_REQUIRED libxklavier >= 5.0 kbproto])
 
 dnl ---------------------------------------------------------------------------
 dnl - Housekeeping plugin stuff
@@ -595,7 +581,6 @@
 
         Session tracking:         ${SESSION_TRACKING}
         LCMS DICT support:        ${have_new_lcms}
-        IBus support:             ${enable_ibus}
         Libnotify support:        ${have_libnotify}
 	App indicator support:    ${enable_appindicator}
         PackageKit support:       ${have_packagekit}
Index: sagarmatha-settings-daemon-3.6.4/data/Makefile.am
===================================================================
--- sagarmatha-settings-daemon-3.6.4.orig/data/Makefile.am	2013-02-18 12:57:16.535698777 +0000
+++ sagarmatha-settings-daemon-3.6.4/data/Makefile.am	2013-02-18 12:57:16.511698776 +0000
@@ -67,12 +67,3 @@
 	Makefile.in			\
 	$(gsettings_SCHEMAS:.xml=.valid)
 
-if HAVE_IBUS
-dbusservicedir=${datadir}/dbus-1/services
-dbusservice_DATA = $(dbusservice_in_files:.service.in=.service)
-
-org.freedesktop.IBus.service: org.freedesktop.IBus.service.in
-	$(AM_V_GEN) sed -e "s|\@bindir\@|$(bindir)|" $< > $@.tmp && mv $@.tmp $@
-
-CLEANFILES = $(dbusservice_DATA)
-endif
Index: sagarmatha-settings-daemon-3.6.4/data/org.sagarmatha.settings-daemon.plugins.media-keys.gschema.xml.in.in
===================================================================
--- sagarmatha-settings-daemon-3.6.4.orig/data/org.sagarmatha.settings-daemon.plugins.media-keys.gschema.xml.in.in	2013-02-18 12:57:16.535698777 +0000
+++ sagarmatha-settings-daemon-3.6.4/data/org.sagarmatha.settings-daemon.plugins.media-keys.gschema.xml.in.in	2013-02-18 12:57:16.515698776 +0000
@@ -180,16 +180,6 @@
       <_summary>Magnifier zoom out</_summary>
       <_description>Binding for the magnifier to zoom out</_description>
     </key>
-    <key name="switch-input-source" type="s">
-      <default>''</default>
-      <_summary>Switch input source</_summary>
-      <_description>Binding to select the next input source</_description>
-    </key>
-    <key name="switch-input-source-backward" type="s">
-      <default>''</default>
-      <_summary>Switch input source backward</_summary>
-      <_description>Binding to select the previous input source</_description>
-    </key>
   </schema>
 
   <schema gettext-domain="@GETTEXT_PACKAGE@" id="org.sagarmatha.settings-daemon.plugins.media-keys.custom-keybinding">
Index: sagarmatha-settings-daemon-3.6.4/plugins/keyboard/delayed-dialog.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ sagarmatha-settings-daemon-3.6.4/plugins/keyboard/delayed-dialog.c	2013-02-18 12:57:16.515698776 +0000
@@ -0,0 +1,128 @@
+/*
+ * Copyright © 2006 Novell, Inc.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2, or (at
+ * your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ */
+
+#include <stdlib.h>
+#include <string.h>
+
+#include <gtk/gtk.h>
+#include <gdk/gdkx.h>
+
+#include "delayed-dialog.h"
+
+static gboolean        delayed_show_timeout (gpointer   data);
+static GdkFilterReturn message_filter       (GdkXEvent *xevent,
+                                             GdkEvent  *event,
+                                             gpointer   data);
+
+static GSList *dialogs = NULL;
+
+/**
+ * csd_delayed_show_dialog:
+ * @dialog: the dialog
+ *
+ * Shows the dialog as with gtk_widget_show(), unless a window manager
+ * hasn't been started yet, in which case it will wait up to 5 seconds
+ * for that to happen before showing the dialog.
+ **/
+void
+csd_delayed_show_dialog (GtkWidget *dialog)
+{
+        GdkDisplay *display = gtk_widget_get_display (dialog);
+        Display *xdisplay = GDK_DISPLAY_XDISPLAY (display);
+        GdkScreen *screen = gtk_widget_get_screen (dialog);
+        char selection_name[10];
+        Atom selection_atom;
+
+        /* We can't use gdk_selection_owner_get() for this, because
+         * it's an unknown out-of-process window.
+         */
+        snprintf (selection_name, sizeof (selection_name), "WM_S%d",
+                  gdk_screen_get_number (screen));
+        selection_atom = XInternAtom (xdisplay, selection_name, True);
+        if (selection_atom &&
+            XGetSelectionOwner (xdisplay, selection_atom) != None) {
+                gtk_widget_show (dialog);
+                return;
+        }
+
+        dialogs = g_slist_prepend (dialogs, dialog);
+
+        gdk_window_add_filter (NULL, message_filter, NULL);
+
+        g_timeout_add (5000, delayed_show_timeout, NULL);
+}
+
+static gboolean
+delayed_show_timeout (gpointer data)
+{
+        GSList *l;
+
+        for (l = dialogs; l; l = l->next)
+                gtk_widget_show (l->data);
+        g_slist_free (dialogs);
+        dialogs = NULL;
+
+        /* FIXME: There's no gdk_display_remove_client_message_filter */
+
+        return FALSE;
+}
+
+static GdkFilterReturn
+message_filter (GdkXEvent *xevent, GdkEvent *event, gpointer data)
+{
+        XClientMessageEvent *evt;
+        char *selection_name;
+        int screen;
+        GSList *l, *next;
+
+        if (((XEvent *)xevent)->type != ClientMessage)
+          return GDK_FILTER_CONTINUE;
+
+        evt = (XClientMessageEvent *)xevent;
+
+        if (evt->message_type != XInternAtom (evt->display, "MANAGER", FALSE))
+          return GDK_FILTER_CONTINUE;
+
+        selection_name = XGetAtomName (evt->display, evt->data.l[1]);
+
+        if (strncmp (selection_name, "WM_S", 4) != 0) {
+                XFree (selection_name);
+                return GDK_FILTER_CONTINUE;
+        }
+
+        screen = atoi (selection_name + 4);
+
+        for (l = dialogs; l; l = next) {
+                GtkWidget *dialog = l->data;
+                next = l->next;
+
+                if (gdk_screen_get_number (gtk_widget_get_screen (dialog)) == screen) {
+                        gtk_widget_show (dialog);
+                        dialogs = g_slist_remove (dialogs, dialog);
+                }
+        }
+
+        if (!dialogs) {
+                gdk_window_remove_filter (NULL, message_filter, NULL);
+        }
+
+        XFree (selection_name);
+
+        return GDK_FILTER_CONTINUE;
+}
Index: sagarmatha-settings-daemon-3.6.4/plugins/keyboard/delayed-dialog.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ sagarmatha-settings-daemon-3.6.4/plugins/keyboard/delayed-dialog.h	2013-02-18 12:57:16.515698776 +0000
@@ -0,0 +1,32 @@
+/*
+ * Copyright © 2006 Novell, Inc.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2, or (at
+ * your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ */
+
+
+#ifndef __DELAYED_DIALOG_H
+#define __DELAYED_DIALOG_H
+
+#include <gtk/gtk.h>
+
+G_BEGIN_DECLS
+
+void            csd_delayed_show_dialog (GtkWidget *dialog);
+
+G_END_DECLS
+
+#endif
Index: sagarmatha-settings-daemon-3.6.4/plugins/keyboard/gkbd-configuration.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ sagarmatha-settings-daemon-3.6.4/plugins/keyboard/gkbd-configuration.c	2013-02-18 12:57:16.515698776 +0000
@@ -0,0 +1,350 @@
+/*
+ * Copyright (C) 2010 Canonical Ltd.
+ * 
+ * Authors: Jan Arne Petersen <jpetersen@openismus.com>
+ * 
+ * Based on gkbd-status.c by Sergey V. Udaltsov <svu@gnome.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+#include <memory.h>
+
+#include <gdk/gdkkeysyms.h>
+#include <gdk/gdkx.h>
+#include <glib/gi18n.h>
+
+#include <libgnomekbd/gkbd-desktop-config.h>
+#include <libgnomekbd/gkbd-indicator-config.h>
+
+#include "gkbd-configuration.h"
+
+struct _GkbdConfigurationPrivate {
+	XklEngine *engine;
+	XklConfigRegistry *registry;
+
+	GkbdDesktopConfig cfg;
+	GkbdIndicatorConfig ind_cfg;
+	GkbdKeyboardConfig kbd_cfg;
+
+	gchar **full_group_names;
+	gchar **short_group_names;
+
+	gulong state_changed_handler;
+	gulong config_changed_handler;
+};
+
+enum {
+	SIGNAL_CHANGED,
+	SIGNAL_GROUP_CHANGED,
+	LAST_SIGNAL
+};
+
+static guint signals[LAST_SIGNAL] = { 0, };
+
+#define GKBD_CONFIGURATION_GET_PRIVATE(o) \
+	(G_TYPE_INSTANCE_GET_PRIVATE ((o), GKBD_TYPE_CONFIGURATION, GkbdConfigurationPrivate))
+
+G_DEFINE_TYPE (GkbdConfiguration, gkbd_configuration, G_TYPE_OBJECT)
+
+/* Should be called once for all widgets */
+static void
+gkbd_configuration_cfg_changed (GSettings *settings,
+				 const char *key,
+				 GkbdConfiguration * configuration)
+{
+	GkbdConfigurationPrivate *priv = configuration->priv;
+
+	xkl_debug (100,
+		   "General configuration changed in GSettings - reiniting...\n");
+	gkbd_desktop_config_load (&priv->cfg);
+	gkbd_desktop_config_activate (&priv->cfg);
+
+	g_signal_emit (configuration,
+		       signals[SIGNAL_CHANGED], 0);
+}
+
+/* Should be called once for all widgets */
+static void
+gkbd_configuration_ind_cfg_changed (GSettings *settings,
+				     const char *key,
+				     GkbdConfiguration * configuration)
+{
+	GkbdConfigurationPrivate *priv = configuration->priv;
+	xkl_debug (100,
+		   "Applet configuration changed in GSettings - reiniting...\n");
+	gkbd_indicator_config_load (&priv->ind_cfg);
+
+	gkbd_indicator_config_free_image_filenames (&priv->ind_cfg);
+	gkbd_indicator_config_load_image_filenames (&priv->ind_cfg,
+						    &priv->kbd_cfg);
+
+	gkbd_indicator_config_activate (&priv->ind_cfg);
+
+	g_signal_emit (configuration,
+		       signals[SIGNAL_CHANGED], 0);
+}
+
+static void
+gkbd_configuration_load_group_names (GkbdConfiguration * configuration,
+				     XklConfigRec * xklrec)
+{
+	GkbdConfigurationPrivate *priv = configuration->priv;
+
+	if (!gkbd_desktop_config_load_group_descriptions (&priv->cfg,
+							  priv->registry,
+							  (const char **) xklrec->layouts,
+							  (const char **) xklrec->variants,
+	     						  &priv->short_group_names,
+							  &priv->full_group_names)) {
+		/* We just populate no short names (remain NULL) - 
+		 * full names are going to be used anyway */
+		gint i, total_groups =
+		    xkl_engine_get_num_groups (priv->engine);
+		xkl_debug (150, "group descriptions loaded: %d!\n",
+			   total_groups);
+		priv->full_group_names =
+		    g_new0 (char *, total_groups + 1);
+
+		if (xkl_engine_get_features (priv->engine) &
+		    XKLF_MULTIPLE_LAYOUTS_SUPPORTED) {
+			for (i = 0; priv->kbd_cfg.layouts_variants[i]; i++) {
+				priv->full_group_names[i] =
+				    g_strdup ((char *) priv->kbd_cfg.layouts_variants[i]);
+			}
+		} else {
+			for (i = total_groups; --i >= 0;) {
+				priv->full_group_names[i] =
+				    g_strdup_printf ("Group %d", i);
+			}
+		}
+	}
+}
+
+/* Should be called once for all widgets */
+static void
+gkbd_configuration_kbd_cfg_callback (XklEngine *engine,
+				     GkbdConfiguration *configuration)
+{
+	GkbdConfigurationPrivate *priv = configuration->priv;
+	XklConfigRec *xklrec = xkl_config_rec_new ();
+	xkl_debug (100,
+		   "XKB configuration changed on X Server - reiniting...\n");
+
+	gkbd_keyboard_config_load_from_x_current (&priv->kbd_cfg,
+						  xklrec);
+
+	gkbd_indicator_config_free_image_filenames (&priv->ind_cfg);
+	gkbd_indicator_config_load_image_filenames (&priv->ind_cfg,
+						    &priv->kbd_cfg);
+
+	g_strfreev (priv->full_group_names);
+	priv->full_group_names = NULL;
+
+	g_strfreev (priv->short_group_names);
+	priv->short_group_names = NULL;
+
+	gkbd_configuration_load_group_names (configuration,
+				 	     xklrec);
+
+	g_signal_emit (configuration,
+		       signals[SIGNAL_CHANGED],
+		       0);
+
+	g_object_unref (G_OBJECT (xklrec));
+}
+
+/* Should be called once for all applets */
+static void
+gkbd_configuration_state_callback (XklEngine * engine,
+				   XklEngineStateChange changeType,
+			    	   gint group, gboolean restore,
+				   GkbdConfiguration * configuration)
+{
+	xkl_debug (150, "group is now %d, restore: %d\n", group, restore);
+
+	if (changeType == GROUP_CHANGED) {
+		g_signal_emit (configuration,
+			       signals[SIGNAL_GROUP_CHANGED], 0,
+			       group);
+	}
+}
+
+static void
+gkbd_configuration_init (GkbdConfiguration *configuration)
+{
+	GkbdConfigurationPrivate *priv;
+	XklConfigRec *xklrec = xkl_config_rec_new ();
+
+	priv = GKBD_CONFIGURATION_GET_PRIVATE (configuration);
+	configuration->priv = priv;
+
+	priv->engine = xkl_engine_get_instance (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()));
+	if (priv->engine == NULL) {
+		xkl_debug (0, "Libxklavier initialization error");
+		return;
+	}
+
+	priv->state_changed_handler =
+	    g_signal_connect (priv->engine, "X-state-changed",
+			      G_CALLBACK (gkbd_configuration_state_callback),
+			      configuration);
+	priv->config_changed_handler =
+	    g_signal_connect (priv->engine, "X-config-changed",
+			      G_CALLBACK (gkbd_configuration_kbd_cfg_callback),
+			      configuration);
+
+	gkbd_desktop_config_init (&priv->cfg, priv->engine);
+	gkbd_keyboard_config_init (&priv->kbd_cfg, priv->engine);
+	gkbd_indicator_config_init (&priv->ind_cfg, priv->engine);
+
+	gkbd_desktop_config_load (&priv->cfg);
+	gkbd_desktop_config_activate (&priv->cfg);
+
+	priv->registry = xkl_config_registry_get_instance (priv->engine);
+	xkl_config_registry_load (priv->registry,
+				  priv->cfg.load_extra_items);
+
+	gkbd_keyboard_config_load_from_x_current (&priv->kbd_cfg,
+						  xklrec);
+
+	gkbd_indicator_config_load (&priv->ind_cfg);
+
+	gkbd_indicator_config_load_image_filenames (&priv->ind_cfg,
+						    &priv->kbd_cfg);
+
+	gkbd_indicator_config_activate (&priv->ind_cfg);
+
+	gkbd_configuration_load_group_names (configuration,
+					     xklrec);
+	g_object_unref (G_OBJECT (xklrec));
+
+	gkbd_desktop_config_start_listen (&priv->cfg,
+					  G_CALLBACK (gkbd_configuration_cfg_changed),
+					  configuration);
+	gkbd_indicator_config_start_listen (&priv->ind_cfg,
+					    G_CALLBACK (gkbd_configuration_ind_cfg_changed),
+					    configuration);
+	xkl_engine_start_listen (priv->engine,
+				 XKLL_TRACK_KEYBOARD_STATE);
+
+	xkl_debug (100, "Initiating the widget startup process for %p\n",
+		   configuration);
+}
+
+static void
+gkbd_configuration_finalize (GObject * obj)
+{
+	GkbdConfiguration *configuration = GKBD_CONFIGURATION (obj);
+	GkbdConfigurationPrivate *priv = configuration->priv;
+
+	xkl_debug (100,
+		   "Starting the gnome-kbd-configuration widget shutdown process for %p\n",
+		   configuration);
+
+	xkl_engine_stop_listen (priv->engine,
+				XKLL_TRACK_KEYBOARD_STATE);
+
+	gkbd_desktop_config_stop_listen (&priv->cfg);
+	gkbd_indicator_config_stop_listen (&priv->ind_cfg);
+
+	gkbd_indicator_config_term (&priv->ind_cfg);
+	gkbd_keyboard_config_term (&priv->kbd_cfg);
+	gkbd_desktop_config_term (&priv->cfg);
+
+	if (g_signal_handler_is_connected (priv->engine,
+					   priv->state_changed_handler)) {
+		g_signal_handler_disconnect (priv->engine,
+					     priv->state_changed_handler);
+		priv->state_changed_handler = 0;
+	}
+	if (g_signal_handler_is_connected (priv->engine,
+					   priv->config_changed_handler)) {
+		g_signal_handler_disconnect (priv->engine,
+					     priv->config_changed_handler);
+		priv->config_changed_handler = 0;
+	}
+
+	g_object_unref (priv->registry);
+	priv->registry = NULL;
+	g_object_unref (priv->engine);
+	priv->engine = NULL;
+
+	G_OBJECT_CLASS (gkbd_configuration_parent_class)->finalize (obj);
+}
+
+static void
+gkbd_configuration_class_init (GkbdConfigurationClass * klass)
+{
+	GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+	/* Initing vtable */
+	object_class->finalize = gkbd_configuration_finalize;
+
+	/* Signals */
+	signals[SIGNAL_CHANGED] = g_signal_new ("changed",
+						GKBD_TYPE_CONFIGURATION,
+						G_SIGNAL_RUN_LAST,
+						0,
+						NULL, NULL,
+						g_cclosure_marshal_VOID__VOID,
+						G_TYPE_NONE,
+						0);
+	signals[SIGNAL_GROUP_CHANGED] = g_signal_new ("group-changed",
+						      GKBD_TYPE_CONFIGURATION,
+						      G_SIGNAL_RUN_LAST,
+						      0,
+						      NULL, NULL,
+						      g_cclosure_marshal_VOID__INT,
+						      G_TYPE_NONE,
+						      1,
+						      G_TYPE_INT);
+
+	g_type_class_add_private (klass, sizeof (GkbdConfigurationPrivate));
+}
+
+GkbdConfiguration *
+gkbd_configuration_get (void)
+{
+	static gpointer instance = NULL;
+
+	if (!instance) {
+		instance = g_object_new (GKBD_TYPE_CONFIGURATION, NULL);
+		g_object_add_weak_pointer (instance, &instance);
+	} else {
+		g_object_ref (instance);
+	}
+
+	return instance;
+}
+
+XklEngine *
+gkbd_configuration_get_xkl_engine (GkbdConfiguration *configuration)
+{
+	return configuration->priv->engine;
+}
+
+const char * const *
+gkbd_configuration_get_group_names (GkbdConfiguration *configuration)
+{
+	return configuration->priv->full_group_names;
+}
+
+const char * const *
+gkbd_configuration_get_short_group_names (GkbdConfiguration *configuration)
+{
+	return configuration->priv->short_group_names;
+}
Index: sagarmatha-settings-daemon-3.6.4/plugins/keyboard/gkbd-configuration.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ sagarmatha-settings-daemon-3.6.4/plugins/keyboard/gkbd-configuration.h	2013-02-18 12:57:16.515698776 +0000
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2010 Canonical Ltd.
+ * 
+ * Authors: Jan Arne Petersen <jpetersen@openismus.com>
+ * 
+ * Based on gkbd-status.h by Sergey V. Udaltsov <svu@gnome.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+#ifndef __GKBD_CONFIGURATION_H__
+#define __GKBD_CONFIGURATION_H__
+
+#include <glib-object.h>
+
+#include <libxklavier/xklavier.h>
+
+G_BEGIN_DECLS
+
+typedef struct _GkbdConfiguration GkbdConfiguration;
+typedef struct _GkbdConfigurationPrivate GkbdConfigurationPrivate;
+typedef struct _GkbdConfigurationClass GkbdConfigurationClass;
+
+#define GKBD_TYPE_CONFIGURATION           (gkbd_configuration_get_type ())
+#define GKBD_CONFIGURATION(obj)           (G_TYPE_CHECK_INSTANCE_CAST ((obj), GKBD_TYPE_CONFIGURATION, GkbdConfiguration))
+#define GKBD_INDCATOR_CLASS(obj)          (G_TYPE_CHECK_CLASS_CAST ((obj), GKBD_TYPE_CONFIGURATION,  GkbdConfigurationClass))
+#define GKBD_IS_CONFIGURATION(obj)        (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GKBD_TYPE_CONFIGURATION))
+#define GKBD_IS_CONFIGURATION_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE ((obj), GKBD_TYPE_CONFIGURATION))
+#define GKBD_CONFIGURATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GKBD_TYPE_CONFIGURATION, GkbdConfigurationClass))
+
+struct _GkbdConfiguration {
+	GObject parent;
+
+	GkbdConfigurationPrivate *priv;
+};
+
+struct _GkbdConfigurationClass {
+	GObjectClass parent_class;
+};
+
+extern GType gkbd_configuration_get_type (void);
+
+extern GkbdConfiguration *gkbd_configuration_get (void);
+
+extern XklEngine *gkbd_configuration_get_xkl_engine (GkbdConfiguration *configuration);
+
+extern const char * const *gkbd_configuration_get_group_names (GkbdConfiguration *configuration);
+extern const char * const *gkbd_configuration_get_short_group_names (GkbdConfiguration *configuration);
+
+G_END_DECLS
+
+#endif
Index: sagarmatha-settings-daemon-3.6.4/plugins/keyboard/csd-keyboard-manager.c
===================================================================
--- sagarmatha-settings-daemon-3.6.4.orig/plugins/keyboard/csd-keyboard-manager.c	2013-02-18 12:57:16.535698777 +0000
+++ sagarmatha-settings-daemon-3.6.4/plugins/keyboard/csd-keyboard-manager.c	2013-02-18 12:57:16.519698776 +0000
@@ -40,22 +40,19 @@
 
 #include <X11/XKBlib.h>
 #include <X11/keysym.h>
-#include <X11/extensions/XKBrules.h>
-
-#define GNOME_DESKTOP_USE_UNSTABLE_API
-#include <libsagarmatha-desktop/gnome-xkb-info.h>
-
-#ifdef HAVE_IBUS
-#include <ibus.h>
-#endif
 
 #include "sagarmatha-settings-profile.h"
 #include "csd-keyboard-manager.h"
-#include "csd-input-helper.h"
 #include "csd-enums.h"
 
+#include "csd-keyboard-xkb.h"
+
 #define CSD_KEYBOARD_MANAGER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), CSD_TYPE_KEYBOARD_MANAGER, CsdKeyboardManagerPrivate))
 
+#ifndef HOST_NAME_MAX
+#  define HOST_NAME_MAX 255
+#endif
+
 #define CSD_KEYBOARD_DIR "org.sagarmatha.settings-daemon.peripherals.keyboard"
 
 #define KEY_REPEAT         "repeat"
@@ -63,7 +60,6 @@
 #define KEY_INTERVAL       "repeat-interval"
 #define KEY_DELAY          "delay"
 #define KEY_CLICK_VOLUME   "click-volume"
-#define KEY_REMEMBER_NUMLOCK_STATE "remember-numlock-state"
 #define KEY_NUMLOCK_STATE  "numlock-state"
 
 #define KEY_BELL_VOLUME    "bell-volume"
@@ -71,560 +67,27 @@
 #define KEY_BELL_DURATION  "bell-duration"
 #define KEY_BELL_MODE      "bell-mode"
 
-#define KEY_SWITCHER "input-sources-switcher"
-
-#define GNOME_DESKTOP_INTERFACE_DIR "org.sagarmatha.desktop.interface"
-
-#define KEY_GTK_IM_MODULE    "gtk-im-module"
-#define GTK_IM_MODULE_SIMPLE "gtk-im-context-simple"
-#define GTK_IM_MODULE_IBUS   "ibus"
-
-#define GNOME_DESKTOP_INPUT_SOURCES_DIR "org.sagarmatha.desktop.input-sources"
-
-#define KEY_CURRENT_INPUT_SOURCE "current"
-#define KEY_INPUT_SOURCES        "sources"
-#define KEY_KEYBOARD_OPTIONS     "xkb-options"
-
-#define INPUT_SOURCE_TYPE_XKB  "xkb"
-#define INPUT_SOURCE_TYPE_IBUS "ibus"
-
-#define DEFAULT_LANGUAGE "en_US"
+#define LIBGNOMEKBD_KEYBOARD_DIR "org.gnome.libgnomekbd.keyboard"
+#define LIBGNOMEKBD_KEY_LAYOUTS  "layouts"
 
 struct CsdKeyboardManagerPrivate
 {
 	guint      start_idle_id;
         GSettings *settings;
-        GSettings *input_sources_settings;
-        GSettings *interface_settings;
-        GnomeXkbInfo *xkb_info;
-#ifdef HAVE_IBUS
-        IBusBus   *ibus;
-        GHashTable *ibus_engines;
-        GHashTable *ibus_xkb_engines;
-        GCancellable *ibus_cancellable;
-        gboolean session_is_fallback;
-#endif
+        GSettings *libgnomekbd_settings;
+        gboolean   have_xkb;
         gint       xkb_event_base;
         CsdNumLockState old_state;
-        GdkDeviceManager *device_manager;
-        guint device_added_id;
-        guint device_removed_id;
-
-        gboolean input_sources_switcher_spawned;
-        GPid input_sources_switcher_pid;
 };
 
 static void     csd_keyboard_manager_class_init  (CsdKeyboardManagerClass *klass);
 static void     csd_keyboard_manager_init        (CsdKeyboardManager      *keyboard_manager);
 static void     csd_keyboard_manager_finalize    (GObject                 *object);
-static gboolean apply_input_sources_settings     (GSettings               *settings,
-                                                  gpointer                 keys,
-                                                  gint                     n_keys,
-                                                  CsdKeyboardManager      *manager);
-static void     set_gtk_im_module                (CsdKeyboardManager      *manager,
-                                                  const gchar             *new_module);
 
 G_DEFINE_TYPE (CsdKeyboardManager, csd_keyboard_manager, G_TYPE_OBJECT)
 
 static gpointer manager_object = NULL;
 
-static void
-init_builder_with_sources (GVariantBuilder *builder,
-                           GSettings       *settings)
-{
-        const gchar *type;
-        const gchar *id;
-        GVariantIter iter;
-        GVariant *sources;
-
-        sources = g_settings_get_value (settings, KEY_INPUT_SOURCES);
-
-        g_variant_builder_init (builder, G_VARIANT_TYPE ("a(ss)"));
-
-        g_variant_iter_init (&iter, sources);
-        while (g_variant_iter_next (&iter, "(&s&s)", &type, &id))
-                g_variant_builder_add (builder, "(ss)", type, id);
-
-        g_variant_unref (sources);
-}
-
-static gboolean
-schema_is_installed (const gchar *name)
-{
-        const gchar * const *schemas;
-        const gchar * const *s;
-
-        schemas = g_settings_list_schemas ();
-        for (s = schemas; *s; ++s)
-                if (g_str_equal (*s, name))
-                        return TRUE;
-
-        return FALSE;
-}
-
-#ifdef HAVE_IBUS
-static void
-clear_ibus (CsdKeyboardManager *manager)
-{
-        CsdKeyboardManagerPrivate *priv = manager->priv;
-
-        g_cancellable_cancel (priv->ibus_cancellable);
-        g_clear_object (&priv->ibus_cancellable);
-        g_clear_pointer (&priv->ibus_engines, g_hash_table_destroy);
-        g_clear_pointer (&priv->ibus_xkb_engines, g_hash_table_destroy);
-        g_clear_object (&priv->ibus);
-}
-
-static gchar *
-make_xkb_source_id (const gchar *engine_id)
-{
-        gchar *id;
-        gchar *p;
-        gint n_colons = 0;
-
-        /* engine_id is like "xkb:layout:variant:lang" where
-         * 'variant' and 'lang' might be empty */
-
-        engine_id += 4;
-
-        for (p = (gchar *)engine_id; *p; ++p)
-                if (*p == ':')
-                        if (++n_colons == 2)
-                                break;
-        if (!*p)
-                return NULL;
-
-        id = g_strndup (engine_id, p - engine_id + 1);
-
-        id[p - engine_id] = '\0';
-
-        /* id is "layout:variant" where 'variant' might be empty */
-
-        for (p = id; *p; ++p)
-                if (*p == ':') {
-                        if (*(p + 1) == '\0')
-                                *p = '\0';
-                        else
-                                *p = '+';
-                        break;
-                }
-
-        /* id is "layout+variant" or "layout" */
-
-        return id;
-}
-
-static void
-fetch_ibus_engines_result (GObject            *object,
-                           GAsyncResult       *result,
-                           CsdKeyboardManager *manager)
-{
-        CsdKeyboardManagerPrivate *priv = manager->priv;
-        GList *list, *l;
-        GError *error = NULL;
-
-        /* engines shouldn't be there yet */
-        g_return_if_fail (priv->ibus_engines == NULL);
-
-        g_clear_object (&priv->ibus_cancellable);
-
-        list = ibus_bus_list_engines_async_finish (priv->ibus,
-                                                   result,
-                                                   &error);
-        if (!list && error) {
-                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
-                        g_warning ("Couldn't finish IBus request: %s", error->message);
-                g_error_free (error);
-
-                clear_ibus (manager);
-                return;
-        }
-
-        /* Maps IBus engine ids to engine description objects */
-        priv->ibus_engines = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, g_object_unref);
-        /* Maps XKB source id strings to engine description objects */
-        priv->ibus_xkb_engines = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);
-
-        for (l = list; l; l = l->next) {
-                IBusEngineDesc *engine = l->data;
-                const gchar *engine_id = ibus_engine_desc_get_name (engine);
-
-                g_hash_table_replace (priv->ibus_engines, (gpointer)engine_id, engine);
-
-                if (strncmp ("xkb:", engine_id, 4) == 0) {
-                        gchar *xkb_source_id = make_xkb_source_id (engine_id);
-                        if (xkb_source_id)
-                                g_hash_table_replace (priv->ibus_xkb_engines,
-                                                      xkb_source_id,
-                                                      engine);
-                }
-        }
-        g_list_free (list);
-
-        apply_input_sources_settings (priv->input_sources_settings, NULL, 0, manager);
-}
-
-static void
-fetch_ibus_engines (CsdKeyboardManager *manager)
-{
-        CsdKeyboardManagerPrivate *priv = manager->priv;
-
-        /* engines shouldn't be there yet */
-        g_return_if_fail (priv->ibus_engines == NULL);
-        g_return_if_fail (priv->ibus_cancellable == NULL);
-
-        priv->ibus_cancellable = g_cancellable_new ();
-
-        ibus_bus_list_engines_async (priv->ibus,
-                                     -1,
-                                     priv->ibus_cancellable,
-                                     (GAsyncReadyCallback)fetch_ibus_engines_result,
-                                     manager);
-}
-
-static void
-maybe_start_ibus (CsdKeyboardManager *manager,
-                  GVariant           *sources)
-{
-        gboolean need_ibus = FALSE;
-        GVariantIter iter;
-        const gchar *type;
-
-        if (manager->priv->session_is_fallback)
-                return;
-
-        g_variant_iter_init (&iter, sources);
-        while (g_variant_iter_next (&iter, "(&s&s)", &type, NULL))
-                if (g_str_equal (type, INPUT_SOURCE_TYPE_IBUS)) {
-                        need_ibus = TRUE;
-                        break;
-                }
-
-        if (!need_ibus)
-                return;
-
-        if (!manager->priv->ibus) {
-                ibus_init ();
-                manager->priv->ibus = ibus_bus_new_async ();
-                g_signal_connect_swapped (manager->priv->ibus, "connected",
-                                          G_CALLBACK (fetch_ibus_engines), manager);
-                g_signal_connect_swapped (manager->priv->ibus, "disconnected",
-                                          G_CALLBACK (clear_ibus), manager);
-        }
-        /* IBus doesn't export API in the session bus. The only thing
-         * we have there is a well known name which we can use as a
-         * sure-fire way to activate it. */
-        g_bus_unwatch_name (g_bus_watch_name (G_BUS_TYPE_SESSION,
-                                              IBUS_SERVICE_IBUS,
-                                              G_BUS_NAME_WATCHER_FLAGS_AUTO_START,
-                                              NULL,
-                                              NULL,
-                                              NULL,
-                                              NULL));
-}
-
-static void
-got_session_name (GObject            *object,
-                  GAsyncResult       *res,
-                  CsdKeyboardManager *manager)
-{
-        GVariant *result, *variant;
-        GDBusConnection *connection = G_DBUS_CONNECTION (object);
-        CsdKeyboardManagerPrivate *priv = manager->priv;
-        const gchar *session_name = NULL;
-        GError *error = NULL;
-
-        /* IBus shouldn't have been touched yet */
-        g_return_if_fail (priv->ibus == NULL);
-
-        g_clear_object (&priv->ibus_cancellable);
-
-        result = g_dbus_connection_call_finish (connection, res, &error);
-        if (!result) {
-                g_warning ("Couldn't get session name: %s", error->message);
-                g_error_free (error);
-                goto out;
-        }
-
-        g_variant_get (result, "(v)", &variant);
-        g_variant_unref (result);
-
-        g_variant_get (variant, "&s", &session_name);
-
-        if (g_strcmp0 (session_name, "gnome") == 0)
-                manager->priv->session_is_fallback = FALSE;
-
-        g_variant_unref (variant);
- out:
-        apply_input_sources_settings (manager->priv->input_sources_settings, NULL, 0, manager);
-        g_object_unref (connection);
-}
-
-static void
-got_bus (GObject            *object,
-         GAsyncResult       *res,
-         CsdKeyboardManager *manager)
-{
-        GDBusConnection *connection;
-        CsdKeyboardManagerPrivate *priv = manager->priv;
-        GError *error = NULL;
-
-        /* IBus shouldn't have been touched yet */
-        g_return_if_fail (priv->ibus == NULL);
-
-        g_clear_object (&priv->ibus_cancellable);
-
-        connection = g_bus_get_finish (res, &error);
-        if (!connection) {
-                g_warning ("Couldn't get session bus: %s", error->message);
-                g_error_free (error);
-                apply_input_sources_settings (priv->input_sources_settings, NULL, 0, manager);
-                return;
-        }
-
-        priv->ibus_cancellable = g_cancellable_new ();
-
-        g_dbus_connection_call (connection,
-                                "org.gnome.SessionManager",
-                                "/org/gnome/SessionManager",
-                                "org.freedesktop.DBus.Properties",
-                                "Get",
-                                g_variant_new ("(ss)",
-                                               "org.gnome.SessionManager",
-                                               "SessionName"),
-                                NULL,
-                                G_DBUS_CALL_FLAGS_NONE,
-                                -1,
-                                priv->ibus_cancellable,
-                                (GAsyncReadyCallback)got_session_name,
-                                manager);
-}
-
-static void
-set_ibus_engine_finish (GObject            *object,
-                        GAsyncResult       *res,
-                        CsdKeyboardManager *manager)
-{
-        gboolean result;
-        IBusBus *ibus = IBUS_BUS (object);
-        CsdKeyboardManagerPrivate *priv = manager->priv;
-        GError *error = NULL;
-
-        g_clear_object (&priv->ibus_cancellable);
-
-        result = ibus_bus_set_global_engine_async_finish (ibus, res, &error);
-        if (!result) {
-                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
-                        g_warning ("Couldn't set IBus engine: %s", error->message);
-                g_error_free (error);
-        }
-}
-
-static void
-set_ibus_engine (CsdKeyboardManager *manager,
-                 const gchar        *engine_id)
-{
-        CsdKeyboardManagerPrivate *priv = manager->priv;
-
-        g_return_if_fail (priv->ibus != NULL);
-        g_return_if_fail (priv->ibus_engines != NULL);
-
-        g_cancellable_cancel (priv->ibus_cancellable);
-        g_clear_object (&priv->ibus_cancellable);
-        priv->ibus_cancellable = g_cancellable_new ();
-
-        ibus_bus_set_global_engine_async (priv->ibus,
-                                          engine_id,
-                                          -1,
-                                          priv->ibus_cancellable,
-                                          (GAsyncReadyCallback)set_ibus_engine_finish,
-                                          manager);
-}
-
-static void
-set_ibus_xkb_engine (CsdKeyboardManager *manager,
-                     const gchar        *xkb_id)
-{
-        IBusEngineDesc *engine;
-        CsdKeyboardManagerPrivate *priv = manager->priv;
-
-        if (!priv->ibus_xkb_engines)
-                return;
-
-        engine = g_hash_table_lookup (priv->ibus_xkb_engines, xkb_id);
-        if (!engine)
-                return;
-
-        set_ibus_engine (manager, ibus_engine_desc_get_name (engine));
-}
-
-/* XXX: See upstream bug:
- * https://codereview.appspot.com/6586075/ */
-static gchar *
-layout_from_ibus_layout (const gchar *ibus_layout)
-{
-        const gchar *p;
-
-        /* we get something like "layout(variant)[option1,option2]" */
-
-        p = ibus_layout;
-        while (*p) {
-                if (*p == '(' || *p == '[')
-                        break;
-                p += 1;
-        }
-
-        return g_strndup (ibus_layout, p - ibus_layout);
-}
-
-static gchar *
-variant_from_ibus_layout (const gchar *ibus_layout)
-{
-        const gchar *a, *b;
-
-        /* we get something like "layout(variant)[option1,option2]" */
-
-        a = ibus_layout;
-        while (*a) {
-                if (*a == '(')
-                        break;
-                a += 1;
-        }
-        if (!*a)
-                return NULL;
-
-        a += 1;
-        b = a;
-        while (*b) {
-                if (*b == ')')
-                        break;
-                b += 1;
-        }
-        if (!*b)
-                return NULL;
-
-        return g_strndup (a, b - a);
-}
-
-static gchar **
-options_from_ibus_layout (const gchar *ibus_layout)
-{
-        const gchar *a, *b;
-        GPtrArray *opt_array;
-
-        /* we get something like "layout(variant)[option1,option2]" */
-
-        a = ibus_layout;
-        while (*a) {
-                if (*a == '[')
-                        break;
-                a += 1;
-        }
-        if (!*a)
-                return NULL;
-
-        opt_array = g_ptr_array_new ();
-
-        do {
-                a += 1;
-                b = a;
-                while (*b) {
-                        if (*b == ',' || *b == ']')
-                                break;
-                        b += 1;
-                }
-                if (!*b)
-                        goto out;
-
-                g_ptr_array_add (opt_array, g_strndup (a, b - a));
-
-                a = b;
-        } while (*a && *a == ',');
-
-out:
-        g_ptr_array_add (opt_array, NULL);
-        return (gchar **) g_ptr_array_free (opt_array, FALSE);
-}
-
-static const gchar *
-engine_from_locale (void)
-{
-        const gchar *locale;
-        const gchar *locale_engine[][2] = {
-                { "as_IN", "m17n:as:phonetic" },
-                { "bn_IN", "m17n:bn:inscript" },
-                { "gu_IN", "m17n:gu:inscript" },
-                { "hi_IN", "m17n:hi:inscript" },
-                { "ja_JP", "anthy" },
-                { "kn_IN", "m17n:kn:kgp" },
-                { "ko_KR", "hangul" },
-                { "mai_IN", "m17n:mai:inscript" },
-                { "ml_IN", "m17n:ml:inscript" },
-                { "mr_IN", "m17n:mr:inscript" },
-                { "or_IN", "m17n:or:inscript" },
-                { "pa_IN", "m17n:pa:inscript" },
-                { "sd_IN", "m17n:sd:inscript" },
-                { "ta_IN", "m17n:ta:tamil99" },
-                { "te_IN", "m17n:te:inscript" },
-                { "zh_CN", "pinyin" },
-                { "zh_HK", "cangjie3" },
-                { "zh_TW", "chewing" },
-        };
-        gint i;
-
-        locale = setlocale (LC_CTYPE, NULL);
-        if (!locale)
-                return NULL;
-
-        for (i = 0; i < G_N_ELEMENTS (locale_engine); ++i)
-                if (g_str_has_prefix (locale, locale_engine[i][0]))
-                        return locale_engine[i][1];
-
-        return NULL;
-}
-
-static void
-add_ibus_sources_from_locale (GSettings *settings)
-{
-        const gchar *locale_engine;
-        GVariantBuilder builder;
-
-        locale_engine = engine_from_locale ();
-        if (!locale_engine)
-                return;
-
-        init_builder_with_sources (&builder, settings);
-        g_variant_builder_add (&builder, "(ss)", INPUT_SOURCE_TYPE_IBUS, locale_engine);
-        g_settings_set_value (settings, KEY_INPUT_SOURCES, g_variant_builder_end (&builder));
-}
-
-static void
-convert_ibus (GSettings *settings)
-{
-        GVariantBuilder builder;
-        GSettings *ibus_settings;
-        gchar **engines, **e;
-
-        if (!schema_is_installed ("org.freedesktop.ibus.general"))
-                return;
-
-        init_builder_with_sources (&builder, settings);
-
-        ibus_settings = g_settings_new ("org.freedesktop.ibus.general");
-        engines = g_settings_get_strv (ibus_settings, "preload-engines");
-        for (e = engines; *e; ++e) {
-                if (g_str_has_prefix (*e, "xkb:"))
-                        continue;
-                g_variant_builder_add (&builder, "(ss)", INPUT_SOURCE_TYPE_IBUS, *e);
-        }
-
-        g_settings_set_value (settings, KEY_INPUT_SOURCES, g_variant_builder_end (&builder));
-
-        g_strfreev (engines);
-        g_object_unref (ibus_settings);
-}
-#endif  /* HAVE_IBUS */
-
 static gboolean
 xkb_set_keyboard_autorepeat_rate (guint delay, guint interval)
 {
@@ -634,33 +97,32 @@
                                      interval);
 }
 
-static gboolean
-check_xkb_extension (CsdKeyboardManager *manager)
+static void
+numlock_xkb_init (CsdKeyboardManager *manager)
 {
         Display *dpy = GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
-        int opcode, error_base, major, minor;
         gboolean have_xkb;
+        int opcode, error_base, major, minor;
 
         have_xkb = XkbQueryExtension (dpy,
                                       &opcode,
                                       &manager->priv->xkb_event_base,
                                       &error_base,
                                       &major,
-                                      &minor);
-        return have_xkb;
-}
+                                      &minor)
+                && XkbUseExtension (dpy, &major, &minor);
 
-static void
-xkb_init (CsdKeyboardManager *manager)
-{
-        Display *dpy;
+        if (have_xkb) {
+                XkbSelectEventDetails (dpy,
+                                       XkbUseCoreKbd,
+                                       XkbStateNotifyMask,
+                                       XkbModifierLockMask,
+                                       XkbModifierLockMask);
+        } else {
+                g_warning ("XKB extension not available");
+        }
 
-        dpy = GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
-        XkbSelectEventDetails (dpy,
-                               XkbUseCoreKbd,
-                               XkbStateNotify,
-                               XkbModifierLockMask,
-                               XkbModifierLockMask);
+        manager->priv->have_xkb = have_xkb;
 }
 
 static unsigned
@@ -681,32 +143,19 @@
         XkbLockModifiers (dpy, XkbUseCoreKbd, num_mask, new_state == CSD_NUM_LOCK_STATE_ON ? num_mask : 0);
 }
 
-static const char *
-num_lock_state_to_string (CsdNumLockState numlock_state)
-{
-	switch (numlock_state) {
-	case CSD_NUM_LOCK_STATE_UNKNOWN:
-		return "CSD_NUM_LOCK_STATE_UNKNOWN";
-	case CSD_NUM_LOCK_STATE_ON:
-		return "CSD_NUM_LOCK_STATE_ON";
-	case CSD_NUM_LOCK_STATE_OFF:
-		return "CSD_NUM_LOCK_STATE_OFF";
-	default:
-		return "UNKNOWN";
-	}
-}
-
 static GdkFilterReturn
-xkb_events_filter (GdkXEvent *xev_,
-		   GdkEvent  *gdkev_,
-		   gpointer   user_data)
+numlock_xkb_callback (GdkXEvent *xev_,
+                      GdkEvent  *gdkev_,
+                      gpointer   user_data)
 {
         XEvent *xev = (XEvent *) xev_;
 	XkbEvent *xkbev = (XkbEvent *) xev;
         CsdKeyboardManager *manager = (CsdKeyboardManager *) user_data;
 
-        if (xev->type != manager->priv->xkb_event_base ||
-            xkbev->any.xkb_type != XkbStateNotify)
+        if (xev->type != manager->priv->xkb_event_base)
+		return GDK_FILTER_CONTINUE;
+
+	if (xkbev->any.xkb_type != XkbStateNotify)
 		return GDK_FILTER_CONTINUE;
 
 	if (xkbev->state.changed & XkbModifierLockMask) {
@@ -717,9 +166,6 @@
 		numlock_state = (num_mask & locked_mods) ? CSD_NUM_LOCK_STATE_ON : CSD_NUM_LOCK_STATE_OFF;
 
 		if (numlock_state != manager->priv->old_state) {
-			g_debug ("New num-lock state '%s' != Old num-lock state '%s'",
-				 num_lock_state_to_string (numlock_state),
-				 num_lock_state_to_string (manager->priv->old_state));
 			g_settings_set_enum (manager->priv->settings,
 					     KEY_NUMLOCK_STATE,
 					     numlock_state);
@@ -731,509 +177,57 @@
 }
 
 static void
-install_xkb_filter (CsdKeyboardManager *manager)
+numlock_install_xkb_callback (CsdKeyboardManager *manager)
 {
-        gdk_window_add_filter (NULL,
-                               xkb_events_filter,
-                               manager);
-}
-
-static void
-remove_xkb_filter (CsdKeyboardManager *manager)
-{
-        gdk_window_remove_filter (NULL,
-                                  xkb_events_filter,
-                                  manager);
-}
-
-static void
-free_xkb_component_names (XkbComponentNamesRec *p)
-{
-        g_return_if_fail (p != NULL);
-
-        free (p->keymap);
-        free (p->keycodes);
-        free (p->types);
-        free (p->compat);
-        free (p->symbols);
-        free (p->geometry);
-
-        g_free (p);
-}
-
-static void
-upload_xkb_description (const gchar          *rules_file_path,
-                        XkbRF_VarDefsRec     *var_defs,
-                        XkbComponentNamesRec *comp_names)
-{
-        Display *display = GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
-        XkbDescRec *xkb_desc;
-        gchar *rules_file;
-
-        /* Upload it to the X server using the same method as setxkbmap */
-        xkb_desc = XkbGetKeyboardByName (display,
-                                         XkbUseCoreKbd,
-                                         comp_names,
-                                         XkbGBN_AllComponentsMask,
-                                         XkbGBN_AllComponentsMask &
-                                         (~XkbGBN_GeometryMask), True);
-        if (!xkb_desc) {
-                g_warning ("Couldn't upload new XKB keyboard description");
+        if (!manager->priv->have_xkb)
                 return;
-        }
-
-        XkbFreeKeyboard (xkb_desc, 0, True);
-
-        rules_file = g_path_get_basename (rules_file_path);
 
-        if (!XkbRF_SetNamesProp (display, rules_file, var_defs))
-                g_warning ("Couldn't update the XKB root window property");
-
-        g_free (rules_file);
-}
-
-static gchar *
-language_code_from_locale (const gchar *locale)
-{
-        if (!locale || !locale[0] || !locale[1])
-                return NULL;
-
-        if (!locale[2] || locale[2] == '_' || locale[2] == '.')
-                return g_strndup (locale, 2);
-
-        if (!locale[3] || locale[3] == '_' || locale[3] == '.')
-                return g_strndup (locale, 3);
-
-        return NULL;
-}
-
-static gchar *
-build_xkb_group_string (const gchar *user,
-                        const gchar *locale,
-                        const gchar *latin)
-{
-        gchar *string;
-        gsize length = 0;
-        guint commas = 2;
-
-        if (latin)
-                length += strlen (latin);
-        else
-                commas -= 1;
-
-        if (locale)
-                length += strlen (locale);
-        else
-                commas -= 1;
-
-        length += strlen (user) + commas + 1;
-
-        string = malloc (length);
-
-        if (locale && latin)
-                sprintf (string, "%s,%s,%s", user, locale, latin);
-        else if (locale)
-                sprintf (string, "%s,%s", user, locale);
-        else if (latin)
-                sprintf (string, "%s,%s", user, latin);
-        else
-                sprintf (string, "%s", user);
-
-        return string;
-}
-
-static gboolean
-layout_equal (const gchar *layout_a,
-              const gchar *variant_a,
-              const gchar *layout_b,
-              const gchar *variant_b)
-{
-        return !g_strcmp0 (layout_a, layout_b) && !g_strcmp0 (variant_a, variant_b);
-}
-
-static void
-replace_layout_and_variant (CsdKeyboardManager *manager,
-                            XkbRF_VarDefsRec   *xkb_var_defs,
-                            const gchar        *layout,
-                            const gchar        *variant)
-{
-        /* Toolkits need to know about both a latin layout to handle
-         * accelerators which are usually defined like Ctrl+C and a
-         * layout with the symbols for the language used in UI strings
-         * to handle mnemonics like Alt+Ф, so we try to find and add
-         * them in XKB group slots after the layout which the user
-         * actually intends to type with. */
-        const gchar *latin_layout = "us";
-        const gchar *latin_variant = "";
-        const gchar *locale_layout = NULL;
-        const gchar *locale_variant = NULL;
-        const gchar *locale;
-        gchar *language;
-
-        if (!layout)
-                return;
-
-        if (!variant)
-                variant = "";
-
-        locale = setlocale (LC_MESSAGES, NULL);
-        /* If LANG is empty, default to en_US */
-        if (!locale)
-                language = g_strdup (DEFAULT_LANGUAGE);
-        else
-                language = language_code_from_locale (locale);
-
-        if (!language)
-                language = language_code_from_locale (DEFAULT_LANGUAGE);
-
-        gnome_xkb_info_get_layout_info_for_language (manager->priv->xkb_info,
-                                                     language,
-                                                     NULL,
-                                                     NULL,
-                                                     NULL,
-                                                     &locale_layout,
-                                                     &locale_variant);
-        g_free (language);
-
-        /* We want to minimize the number of XKB groups if we have
-         * duplicated layout+variant pairs.
-         *
-         * Also, if a layout doesn't have a variant we still have to
-         * include it in the variants string because the number of
-         * variants must agree with the number of layouts. For
-         * instance:
-         *
-         * layouts:  "us,ru,us"
-         * variants: "dvorak,,"
-         */
-        if (layout_equal (latin_layout, latin_variant, locale_layout, locale_variant) ||
-            layout_equal (latin_layout, latin_variant, layout, variant)) {
-                latin_layout = NULL;
-                latin_variant = NULL;
-        }
-
-        if (layout_equal (locale_layout, locale_variant, layout, variant)) {
-                locale_layout = NULL;
-                locale_variant = NULL;
-        }
-
-        free (xkb_var_defs->layout);
-        xkb_var_defs->layout = build_xkb_group_string (layout, locale_layout, latin_layout);
-
-        free (xkb_var_defs->variant);
-        xkb_var_defs->variant = build_xkb_group_string (variant, locale_variant, latin_variant);
-}
-
-static gchar *
-build_xkb_options_string (gchar **options)
-{
-        gchar *string;
-
-        if (*options) {
-                gint i;
-                gsize len;
-                gchar *ptr;
-
-                /* First part, getting length */
-                len = 1 + strlen (options[0]);
-                for (i = 1; options[i] != NULL; i++)
-                        len += strlen (options[i]);
-                len += (i - 1); /* commas */
-
-                /* Second part, building string */
-                string = malloc (len);
-                ptr = g_stpcpy (string, *options);
-                for (i = 1; options[i] != NULL; i++) {
-                        ptr = g_stpcpy (ptr, ",");
-                        ptr = g_stpcpy (ptr, options[i]);
-                }
-        } else {
-                string = malloc (1);
-                *string = '\0';
-        }
-
-        return string;
-}
-
-static gchar **
-append_options (gchar **a,
-                gchar **b)
-{
-        gchar **c, **p;
-
-        if (!a && !b)
-                return NULL;
-        else if (!a)
-                return g_strdupv (b);
-        else if (!b)
-                return g_strdupv (a);
-
-        c = g_new0 (gchar *, g_strv_length (a) + g_strv_length (b) + 1);
-        p = c;
-
-        while (*a) {
-                *p = g_strdup (*a);
-                p += 1;
-                a += 1;
-        }
-        while (*b) {
-                *p = g_strdup (*b);
-                p += 1;
-                b += 1;
-        }
-
-        return c;
-}
-
-static void
-add_xkb_options (CsdKeyboardManager *manager,
-                 XkbRF_VarDefsRec   *xkb_var_defs,
-                 gchar             **extra_options)
-{
-        gchar **options;
-        gchar **settings_options;
-
-        settings_options = g_settings_get_strv (manager->priv->input_sources_settings,
-                                                KEY_KEYBOARD_OPTIONS);
-        options = append_options (settings_options, extra_options);
-        g_strfreev (settings_options);
-
-        free (xkb_var_defs->options);
-        xkb_var_defs->options = build_xkb_options_string (options);
-
-        g_strfreev (options);
+        gdk_window_add_filter (NULL,
+                               numlock_xkb_callback,
+                               manager);
 }
 
-static void
-apply_xkb_settings (CsdKeyboardManager *manager,
-                    const gchar        *layout,
-                    const gchar        *variant,
-                    gchar             **options)
+static guint
+_csd_settings_get_uint (GSettings  *settings,
+			const char *key)
 {
-        XkbRF_RulesRec *xkb_rules;
-        XkbRF_VarDefsRec *xkb_var_defs;
-        gchar *rules_file_path;
-
-        gnome_xkb_info_get_var_defs (&rules_file_path, &xkb_var_defs);
-
-        add_xkb_options (manager, xkb_var_defs, options);
-        replace_layout_and_variant (manager, xkb_var_defs, layout, variant);
-
-        gdk_error_trap_push ();
-
-        xkb_rules = XkbRF_Load (rules_file_path, NULL, True, True);
-        if (xkb_rules) {
-                XkbComponentNamesRec *xkb_comp_names;
-                xkb_comp_names = g_new0 (XkbComponentNamesRec, 1);
-
-                XkbRF_GetComponents (xkb_rules, xkb_var_defs, xkb_comp_names);
-                upload_xkb_description (rules_file_path, xkb_var_defs, xkb_comp_names);
+	guint value;
 
-                free_xkb_component_names (xkb_comp_names);
-                XkbRF_Free (xkb_rules, True);
-        } else {
-                g_warning ("Couldn't load XKB rules");
-        }
-
-        if (gdk_error_trap_pop ())
-                g_warning ("Error loading XKB rules");
-
-        gnome_xkb_info_free_var_defs (xkb_var_defs);
-        g_free (rules_file_path);
+	g_settings_get (settings, key, "u", &value);
+	return value;
 }
 
 static void
-set_gtk_im_module (CsdKeyboardManager *manager,
-                   const gchar        *new_module)
-{
-        CsdKeyboardManagerPrivate *priv = manager->priv;
-        gchar *current_module;
-
-        current_module = g_settings_get_string (priv->interface_settings,
-                                                KEY_GTK_IM_MODULE);
-        if (!g_str_equal (current_module, new_module))
-                g_settings_set_string (priv->interface_settings,
-                                       KEY_GTK_IM_MODULE,
-                                       new_module);
-        g_free (current_module);
-}
-
-static gboolean
-apply_input_sources_settings (GSettings          *settings,
-                              gpointer            keys,
-                              gint                n_keys,
-                              CsdKeyboardManager *manager)
+apply_settings (GSettings          *settings,
+                const char         *key,
+                CsdKeyboardManager *manager)
 {
-        CsdKeyboardManagerPrivate *priv = manager->priv;
-        GVariant *sources;
-        guint current;
-        guint n_sources;
-        const gchar *type = NULL;
-        const gchar *id = NULL;
-        gchar *layout = NULL;
-        gchar *variant = NULL;
-        gchar **options = NULL;
-
-        sources = g_settings_get_value (priv->input_sources_settings, KEY_INPUT_SOURCES);
-        current = g_settings_get_uint (priv->input_sources_settings, KEY_CURRENT_INPUT_SOURCE);
-        n_sources = g_variant_n_children (sources);
-
-        if (n_sources < 1)
-                goto exit;
-
-        if (current >= n_sources) {
-                g_settings_set_uint (priv->input_sources_settings,
-                                     KEY_CURRENT_INPUT_SOURCE,
-                                     n_sources - 1);
-                goto exit;
-        }
-
-#ifdef HAVE_IBUS
-        maybe_start_ibus (manager, sources);
-#endif
-
-        g_variant_get_child (sources, current, "(&s&s)", &type, &id);
-
-        if (g_str_equal (type, INPUT_SOURCE_TYPE_XKB)) {
-                const gchar *l, *v;
-                gnome_xkb_info_get_layout_info (priv->xkb_info, id, NULL, NULL, &l, &v);
-
-                layout = g_strdup (l);
-                variant = g_strdup (v);
-
-                if (!layout || !layout[0]) {
-                        g_warning ("Couldn't find XKB input source '%s'", id);
-                        goto exit;
-                }
-                set_gtk_im_module (manager, GTK_IM_MODULE_SIMPLE);
-#ifdef HAVE_IBUS
-                set_ibus_xkb_engine (manager, id);
-#endif
-        } else if (g_str_equal (type, INPUT_SOURCE_TYPE_IBUS)) {
-#ifdef HAVE_IBUS
-                IBusEngineDesc *engine_desc = NULL;
-
-                if (priv->session_is_fallback)
-                        goto exit;
-
-                if (priv->ibus_engines)
-                        engine_desc = g_hash_table_lookup (priv->ibus_engines, id);
-                else
-                        goto exit; /* we'll be called again when ibus is up and running */
-
-                if (engine_desc) {
-                        const gchar *ibus_layout;
-                        ibus_layout = ibus_engine_desc_get_layout (engine_desc);
-
-                        if (ibus_layout) {
-                                layout = layout_from_ibus_layout (ibus_layout);
-                                variant = variant_from_ibus_layout (ibus_layout);
-                                options = options_from_ibus_layout (ibus_layout);
-                        }
-                } else {
-                        g_warning ("Couldn't find IBus input source '%s'", id);
-                        goto exit;
-                }
-
-                set_gtk_im_module (manager, GTK_IM_MODULE_IBUS);
-                set_ibus_engine (manager, id);
-#else
-                g_warning ("IBus input source type specified but IBus support was not compiled");
-#endif
-        } else {
-                g_warning ("Unknown input source type '%s'", type);
-        }
-
- exit:
-        apply_xkb_settings (manager, layout, variant, options);
-        g_variant_unref (sources);
-        g_free (layout);
-        g_free (variant);
-        g_strfreev (options);
-        /* Prevent individual "changed" signal invocations since we
-           don't need them. */
-        return TRUE;
-}
-
-static void
-apply_bell (CsdKeyboardManager *manager)
-{
-	GSettings       *settings;
         XKeyboardControl kbdcontrol;
+        gboolean         repeat;
         gboolean         click;
+        guint            interval;
+        guint            delay;
+        int              click_volume;
         int              bell_volume;
         int              bell_pitch;
         int              bell_duration;
         CsdBellMode      bell_mode;
-        int              click_volume;
+        gboolean         rnumlock;
 
-        g_debug ("Applying the bell settings");
-        settings      = manager->priv->settings;
+        if (g_strcmp0 (key, KEY_NUMLOCK_STATE) == 0)
+                return;
+
+        repeat        = g_settings_get_boolean  (settings, KEY_REPEAT);
         click         = g_settings_get_boolean  (settings, KEY_CLICK);
+        interval      = _csd_settings_get_uint  (settings, KEY_INTERVAL);
+        delay         = _csd_settings_get_uint  (settings, KEY_DELAY);
         click_volume  = g_settings_get_int   (settings, KEY_CLICK_VOLUME);
-
         bell_pitch    = g_settings_get_int   (settings, KEY_BELL_PITCH);
         bell_duration = g_settings_get_int   (settings, KEY_BELL_DURATION);
 
         bell_mode = g_settings_get_enum (settings, KEY_BELL_MODE);
         bell_volume   = (bell_mode == CSD_BELL_MODE_ON) ? 50 : 0;
 
-        /* as percentage from 0..100 inclusive */
-        if (click_volume < 0) {
-                click_volume = 0;
-        } else if (click_volume > 100) {
-                click_volume = 100;
-        }
-        kbdcontrol.key_click_percent = click ? click_volume : 0;
-        kbdcontrol.bell_percent = bell_volume;
-        kbdcontrol.bell_pitch = bell_pitch;
-        kbdcontrol.bell_duration = bell_duration;
-
-        gdk_error_trap_push ();
-        XChangeKeyboardControl (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
-                                KBKeyClickPercent | KBBellPercent | KBBellPitch | KBBellDuration,
-                                &kbdcontrol);
-
-        XSync (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), FALSE);
-        gdk_error_trap_pop_ignored ();
-}
-
-static void
-apply_numlock (CsdKeyboardManager *manager)
-{
-	GSettings *settings;
-        gboolean rnumlock;
-
-        g_debug ("Applying the num-lock settings");
-        settings = manager->priv->settings;
-        rnumlock = g_settings_get_boolean  (settings, KEY_REMEMBER_NUMLOCK_STATE);
-        manager->priv->old_state = g_settings_get_enum (manager->priv->settings, KEY_NUMLOCK_STATE);
-
-        gdk_error_trap_push ();
-        if (rnumlock) {
-                g_debug ("Remember num-lock is set, so applying setting '%s'",
-                         num_lock_state_to_string (manager->priv->old_state));
-                numlock_set_xkb_state (manager->priv->old_state);
-        }
-
-        XSync (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), FALSE);
-        gdk_error_trap_pop_ignored ();
-}
-
-static void
-apply_repeat (CsdKeyboardManager *manager)
-{
-	GSettings       *settings;
-        gboolean         repeat;
-        guint            interval;
-        guint            delay;
-
-        g_debug ("Applying the repeat settings");
-        settings      = manager->priv->settings;
-        repeat        = g_settings_get_boolean  (settings, KEY_REPEAT);
-        interval      = g_settings_get_uint  (settings, KEY_INTERVAL);
-        delay         = g_settings_get_uint  (settings, KEY_DELAY);
-
         gdk_error_trap_push ();
         if (repeat) {
                 gboolean rate_set = FALSE;
@@ -1249,319 +243,124 @@
                 XAutoRepeatOff (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()));
         }
 
-        XSync (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), FALSE);
-        gdk_error_trap_pop_ignored ();
-}
-
-static void
-apply_all_settings (CsdKeyboardManager *manager)
-{
-	apply_repeat (manager);
-	apply_bell (manager);
-	apply_numlock (manager);
-}
-
-static void
-set_input_sources_switcher (CsdKeyboardManager *manager,
-                            gboolean            state)
-{
-        if (state) {
-                GError *error = NULL;
-                char *args[2];
-
-                if (manager->priv->input_sources_switcher_spawned)
-                        set_input_sources_switcher (manager, FALSE);
-
-                args[0] = LIBEXECDIR "/csd-input-sources-switcher";
-                args[1] = NULL;
-
-                g_spawn_async (NULL, args, NULL,
-                               0, NULL, NULL,
-                               &manager->priv->input_sources_switcher_pid, &error);
-
-                manager->priv->input_sources_switcher_spawned = (error == NULL);
-
-                if (error) {
-                        g_warning ("Couldn't spawn %s: %s", args[0], error->message);
-                        g_error_free (error);
-                }
-        } else if (manager->priv->input_sources_switcher_spawned) {
-                kill (manager->priv->input_sources_switcher_pid, SIGHUP);
-                g_spawn_close_pid (manager->priv->input_sources_switcher_pid);
-                manager->priv->input_sources_switcher_spawned = FALSE;
+        /* as percentage from 0..100 inclusive */
+        if (click_volume < 0) {
+                click_volume = 0;
+        } else if (click_volume > 100) {
+                click_volume = 100;
         }
-}
-
-static gboolean
-enable_switcher (CsdKeyboardManager *manager)
-{
-        CsdInputSourcesSwitcher switcher;
+        kbdcontrol.key_click_percent = click ? click_volume : 0;
+        kbdcontrol.bell_percent = bell_volume;
+        kbdcontrol.bell_pitch = bell_pitch;
+        kbdcontrol.bell_duration = bell_duration;
+        XChangeKeyboardControl (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
+                                KBKeyClickPercent | KBBellPercent | KBBellPitch | KBBellDuration,
+                                &kbdcontrol);
 
-        switcher = g_settings_get_enum (manager->priv->settings, KEY_SWITCHER);
+	if (g_strcmp0 (key, "remember-numlock-state") == 0 || key == NULL) {
+		rnumlock      = g_settings_get_boolean  (settings, "remember-numlock-state");
 
-        return switcher != CSD_INPUT_SOURCES_SWITCHER_OFF;
-}
+		manager->priv->old_state = g_settings_get_enum (manager->priv->settings, KEY_NUMLOCK_STATE);
 
-static void
-settings_changed (GSettings          *settings,
-                  const char         *key,
-                  CsdKeyboardManager *manager)
-{
-	if (g_strcmp0 (key, KEY_CLICK) == 0||
-	    g_strcmp0 (key, KEY_CLICK_VOLUME) == 0 ||
-	    g_strcmp0 (key, KEY_BELL_PITCH) == 0 ||
-	    g_strcmp0 (key, KEY_BELL_DURATION) == 0 ||
-	    g_strcmp0 (key, KEY_BELL_MODE) == 0) {
-		g_debug ("Bell setting '%s' changed, applying bell settings", key);
-		apply_bell (manager);
-	} else if (g_strcmp0 (key, KEY_REMEMBER_NUMLOCK_STATE) == 0) {
-		g_debug ("Remember Num-Lock state '%s' changed, applying num-lock settings", key);
-		apply_numlock (manager);
-	} else if (g_strcmp0 (key, KEY_NUMLOCK_STATE) == 0) {
-		g_debug ("Num-Lock state '%s' changed, will apply at next startup", key);
-	} else if (g_strcmp0 (key, KEY_REPEAT) == 0 ||
-		 g_strcmp0 (key, KEY_INTERVAL) == 0 ||
-		 g_strcmp0 (key, KEY_DELAY) == 0) {
-		g_debug ("Key repeat setting '%s' changed, applying key repeat settings", key);
-		apply_repeat (manager);
-        } else if (g_strcmp0 (key, KEY_SWITCHER) == 0) {
-                set_input_sources_switcher (manager, enable_switcher (manager));
-	} else {
-		g_warning ("Unhandled settings change, key '%s'", key);
+		if (manager->priv->have_xkb && rnumlock)
+			numlock_set_xkb_state (manager->priv->old_state);
 	}
 
+        XSync (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), FALSE);
+        gdk_error_trap_pop_ignored ();
 }
 
-static void
-device_added_cb (GdkDeviceManager   *device_manager,
-                 GdkDevice          *device,
-                 CsdKeyboardManager *manager)
-{
-        GdkInputSource source;
-
-        source = gdk_device_get_source (device);
-        if (source == GDK_SOURCE_KEYBOARD) {
-                g_debug ("New keyboard plugged in, applying all settings");
-                apply_all_settings (manager);
-                apply_input_sources_settings (manager->priv->input_sources_settings, NULL, 0, manager);
-                run_custom_command (device, COMMAND_DEVICE_ADDED);
-        }
-}
-
-static void
-device_removed_cb (GdkDeviceManager   *device_manager,
-                   GdkDevice          *device,
-                   CsdKeyboardManager *manager)
-{
-        GdkInputSource source;
-
-        source = gdk_device_get_source (device);
-        if (source == GDK_SOURCE_KEYBOARD) {
-                run_custom_command (device, COMMAND_DEVICE_REMOVED);
-        }
-}
-
-static void
-set_devicepresence_handler (CsdKeyboardManager *manager)
-{
-        GdkDeviceManager *device_manager;
-
-        device_manager = gdk_display_get_device_manager (gdk_display_get_default ());
-
-        manager->priv->device_added_id = g_signal_connect (G_OBJECT (device_manager), "device-added",
-                                                           G_CALLBACK (device_added_cb), manager);
-        manager->priv->device_removed_id = g_signal_connect (G_OBJECT (device_manager), "device-removed",
-                                                             G_CALLBACK (device_removed_cb), manager);
-        manager->priv->device_manager = device_manager;
-}
-
-static void
-create_sources_from_current_xkb_config (GSettings *settings)
-{
-        GVariantBuilder builder;
-        XkbRF_VarDefsRec *xkb_var_defs;
-        gchar *tmp;
-        gchar **layouts = NULL;
-        gchar **variants = NULL;
-        guint i, n;
-
-        gnome_xkb_info_get_var_defs (&tmp, &xkb_var_defs);
-        g_free (tmp);
-
-        if (xkb_var_defs->layout)
-                layouts = g_strsplit (xkb_var_defs->layout, ",", 0);
-        if (xkb_var_defs->variant)
-                variants = g_strsplit (xkb_var_defs->variant, ",", 0);
-
-        gnome_xkb_info_free_var_defs (xkb_var_defs);
-
-        if (!layouts)
-                goto out;
-
-        if (variants && variants[0])
-                n = MIN (g_strv_length (layouts), g_strv_length (variants));
-        else
-                n = g_strv_length (layouts);
-
-        g_variant_builder_init (&builder, G_VARIANT_TYPE ("a(ss)"));
-        for (i = 0; i < n && layouts[i][0]; ++i) {
-                if (variants && variants[i] && variants[i][0])
-                        tmp = g_strdup_printf ("%s+%s", layouts[i], variants[i]);
-                else
-                        tmp = g_strdup (layouts[i]);
-
-                g_variant_builder_add (&builder, "(ss)", INPUT_SOURCE_TYPE_XKB, tmp);
-                g_free (tmp);
-        }
-        g_settings_set_value (settings, KEY_INPUT_SOURCES, g_variant_builder_end (&builder));
-out:
-        g_strfreev (layouts);
-        g_strfreev (variants);
-}
-
-static void
-convert_libgnomekbd_options (GSettings *settings)
+void
+csd_keyboard_manager_apply_settings (CsdKeyboardManager *manager)
 {
-        GPtrArray *opt_array;
-        GSettings *libgnomekbd_settings;
-        gchar **options, **o;
-
-        if (!schema_is_installed ("org.gnome.libgnomekbd.keyboard"))
-                return;
-
-        opt_array = g_ptr_array_new_with_free_func (g_free);
-
-        libgnomekbd_settings = g_settings_new ("org.gnome.libgnomekbd.keyboard");
-        options = g_settings_get_strv (libgnomekbd_settings, "options");
-
-        for (o = options; *o; ++o) {
-                gchar **strv;
-
-                strv = g_strsplit (*o, "\t", 2);
-                if (strv[0] && strv[1]) {
-                        /* We don't want the group switcher because
-                         * it's incompatible with the way we use XKB
-                         * groups. */
-                        if (!g_str_has_prefix (strv[1], "grp:"))
-                                g_ptr_array_add (opt_array, g_strdup (strv[1]));
-                }
-                g_strfreev (strv);
-        }
-        g_ptr_array_add (opt_array, NULL);
-
-        g_settings_set_strv (settings, KEY_KEYBOARD_OPTIONS, (const gchar * const*) opt_array->pdata);
-
-        g_strfreev (options);
-        g_object_unref (libgnomekbd_settings);
-        g_ptr_array_free (opt_array, TRUE);
+        apply_settings (manager->priv->settings, NULL, manager);
 }
 
 static void
-convert_libgnomekbd_layouts (GSettings *settings)
+apply_libgnomekbd_settings (GSettings          *settings,
+                            const char         *key,
+                            CsdKeyboardManager *manager)
 {
-        GVariantBuilder builder;
-        GSettings *libgnomekbd_settings;
-        gchar **layouts, **l;
-
-        if (!schema_is_installed ("org.gnome.libgnomekbd.keyboard"))
-                return;
+        gchar **layouts;
 
-        init_builder_with_sources (&builder, settings);
+        layouts = g_settings_get_strv  (settings, LIBGNOMEKBD_KEY_LAYOUTS);
 
-        libgnomekbd_settings = g_settings_new ("org.gnome.libgnomekbd.keyboard");
-        layouts = g_settings_get_strv (libgnomekbd_settings, "layouts");
-
-        for (l = layouts; *l; ++l) {
-                gchar *id;
-                gchar **strv;
-
-                strv = g_strsplit (*l, "\t", 2);
-                if (strv[0] && !strv[1])
-                        id = g_strdup (strv[0]);
-                else if (strv[0] && strv[1])
-                        id = g_strdup_printf ("%s+%s", strv[0], strv[1]);
-                else
-                        id = NULL;
-
-                if (id)
-                        g_variant_builder_add (&builder, "(ss)", INPUT_SOURCE_TYPE_XKB, id);
-
-                g_free (id);
-                g_strfreev (strv);
-        }
-
-        g_settings_set_value (settings, KEY_INPUT_SOURCES, g_variant_builder_end (&builder));
-
-        g_strfreev (layouts);
-        g_object_unref (libgnomekbd_settings);
-}
-
-static void
-maybe_convert_old_settings (GSettings *settings)
-{
-        GVariant *sources;
-        gchar **options;
-        gchar *stamp_dir_path = NULL;
-        gchar *stamp_file_path = NULL;
+        /* Get accounts daemon */
+        GDBusProxy *proxy = NULL;
+        GDBusProxy *user = NULL;
+        GVariant *variant = NULL;
         GError *error = NULL;
+        gchar *object_path = NULL;
 
-        stamp_dir_path = g_build_filename (g_get_user_data_dir (), PACKAGE_NAME, NULL);
-        if (g_mkdir_with_parents (stamp_dir_path, 0755)) {
-                g_warning ("Failed to create directory %s: %s", stamp_dir_path, g_strerror (errno));
-                goto out;
-        }
+        proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
+                                               G_DBUS_PROXY_FLAGS_NONE,
+                                               NULL,
+                                               "org.freedesktop.Accounts",
+                                               "/org/freedesktop/Accounts",
+                                               "org.freedesktop.Accounts",
+                                               NULL,
+                                               &error);
 
-        stamp_file_path = g_build_filename (stamp_dir_path, "input-sources-converted", NULL);
-        if (g_file_test (stamp_file_path, G_FILE_TEST_EXISTS))
-                goto out;
-
-        sources = g_settings_get_value (settings, KEY_INPUT_SOURCES);
-        if (g_variant_n_children (sources) < 1) {
-                convert_libgnomekbd_layouts (settings);
-#ifdef HAVE_IBUS
-                convert_ibus (settings);
-#endif
+        if (proxy == NULL) {
+                g_warning ("Failed to contact accounts service: %s", error->message);
+                g_error_free (error);
+                goto bail;
         }
-        g_variant_unref (sources);
 
-        options = g_settings_get_strv (settings, KEY_KEYBOARD_OPTIONS);
-        if (g_strv_length (options) < 1)
-                convert_libgnomekbd_options (settings);
-        g_strfreev (options);
+        variant = g_dbus_proxy_call_sync (proxy,
+                                          "FindUserByName",
+                                          g_variant_new ("(s)", g_get_user_name ()),
+                                          G_DBUS_CALL_FLAGS_NONE,
+                                          -1,
+                                          NULL,
+                                          &error);
 
-        if (!g_file_set_contents (stamp_file_path, "", 0, &error)) {
-                g_warning ("%s", error->message);
+        if (variant == NULL) {
+                g_warning ("Could not contact accounts service to look up '%s': %s",
+                           g_get_user_name (), error->message);
                 g_error_free (error);
+                goto bail;
         }
-out:
-        g_free (stamp_file_path);
-        g_free (stamp_dir_path);
-}
 
-static void
-maybe_create_input_sources (CsdKeyboardManager *manager)
-{
-        GSettings *settings;
-        GVariant *sources;
-
-        settings = manager->priv->input_sources_settings;
+        g_variant_get (variant, "(o)", &object_path);
+        user = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
+                                              G_DBUS_PROXY_FLAGS_NONE,
+                                              NULL,
+                                              "org.freedesktop.Accounts",
+                                              object_path,
+                                              "org.freedesktop.Accounts.User",
+                                              NULL,
+                                              &error);
+        g_free (object_path);
 
-        if (g_getenv ("RUNNING_UNDER_GDM")) {
-                create_sources_from_current_xkb_config (settings);
-                return;
+        if (user == NULL) {
+                g_warning ("Could not create proxy for user '%s': %s",
+                           g_variant_get_string (variant, NULL), error->message);
+                g_error_free (error);
+                goto bail;
         }
+        g_variant_unref (variant);
 
-        maybe_convert_old_settings (settings);
+        variant = g_dbus_proxy_call_sync (user,
+                                          "SetXKeyboardLayouts",
+                                          g_variant_new ("(^as)", layouts),
+                                          G_DBUS_CALL_FLAGS_NONE,
+                                          -1,
+                                          NULL,
+                                          &error);
 
-        /* if we still don't have anything do some educated guesses */
-        sources = g_settings_get_value (settings, KEY_INPUT_SOURCES);
-        if (g_variant_n_children (sources) < 1) {
-                create_sources_from_current_xkb_config (settings);
-#ifdef HAVE_IBUS
-                add_ibus_sources_from_locale (settings);
-#endif
+        if (variant == NULL) {
+                g_warning ("Failed to set the keyboard layouts: %s", error->message);
+                g_error_free (error);
+                goto bail;
         }
-        g_variant_unref (sources);
+
+bail:
+        if (proxy != NULL)
+                g_object_unref (proxy);
+        if (variant != NULL)
+                g_variant_unref (variant);
+        g_strfreev (layouts);
 }
 
 static gboolean
@@ -1571,41 +370,26 @@
 
         g_debug ("Starting keyboard manager");
 
+        manager->priv->have_xkb = 0;
         manager->priv->settings = g_settings_new (CSD_KEYBOARD_DIR);
+        manager->priv->libgnomekbd_settings = g_settings_new (LIBGNOMEKBD_KEYBOARD_DIR);
 
-	xkb_init (manager);
+        /* Essential - xkb initialization should happen before */
+        csd_keyboard_xkb_init (manager);
 
-	set_devicepresence_handler (manager);
+        numlock_xkb_init (manager);
 
-        manager->priv->input_sources_settings = g_settings_new (GNOME_DESKTOP_INPUT_SOURCES_DIR);
-        manager->priv->interface_settings = g_settings_new (GNOME_DESKTOP_INTERFACE_DIR);
-        manager->priv->xkb_info = gnome_xkb_info_new ();
-
-        maybe_create_input_sources (manager);
-
-#ifdef HAVE_IBUS
-        /* We don't want to touch IBus until we are sure this isn't a
-           fallback session. */
-        manager->priv->session_is_fallback = TRUE;
-        manager->priv->ibus_cancellable = g_cancellable_new ();
-        g_bus_get (G_BUS_TYPE_SESSION,
-                   manager->priv->ibus_cancellable,
-                   (GAsyncReadyCallback)got_bus,
-                   manager);
-#else
-        apply_input_sources_settings (manager->priv->input_sources_settings, NULL, 0, manager);
-#endif
         /* apply current settings before we install the callback */
-        g_debug ("Started the keyboard plugin, applying all settings");
-        apply_all_settings (manager);
+        csd_keyboard_manager_apply_settings (manager);
 
         g_signal_connect (G_OBJECT (manager->priv->settings), "changed",
-                          G_CALLBACK (settings_changed), manager);
-        g_signal_connect (G_OBJECT (manager->priv->input_sources_settings), "change-event",
-                          G_CALLBACK (apply_input_sources_settings), manager);
+                          G_CALLBACK (apply_settings), manager);
+
+        apply_libgnomekbd_settings (manager->priv->libgnomekbd_settings, NULL, manager);
+        g_signal_connect (G_OBJECT (manager->priv->libgnomekbd_settings), "changed",
+                          G_CALLBACK (apply_libgnomekbd_settings), manager);
 
-	install_xkb_filter (manager);
-        set_input_sources_switcher (manager, enable_switcher (manager));
+        numlock_install_xkb_callback (manager);
 
         sagarmatha_settings_profile_end (NULL);
 
@@ -1620,11 +404,6 @@
 {
         sagarmatha_settings_profile_start (NULL);
 
-	if (check_xkb_extension (manager) == FALSE) {
-		g_debug ("XKB is not supported, not applying any settings");
-		return TRUE;
-	}
-
         manager->priv->start_idle_id = g_idle_add ((GSourceFunc) start_keyboard_idle_cb, manager);
 
         sagarmatha_settings_profile_end (NULL);
@@ -1639,24 +418,37 @@
 
         g_debug ("Stopping keyboard manager");
 
-        g_clear_object (&p->settings);
-        g_clear_object (&p->input_sources_settings);
-        g_clear_object (&p->interface_settings);
-        g_clear_object (&p->xkb_info);
+        if (p->settings != NULL) {
+                g_object_unref (p->settings);
+                p->settings = NULL;
+        }
 
-#ifdef HAVE_IBUS
-        clear_ibus (manager);
-#endif
+        if (p->libgnomekbd_settings != NULL) {
+                g_object_unref (p->libgnomekbd_settings);
+                p->libgnomekbd_settings = NULL;
+        }
 
-        if (p->device_manager != NULL) {
-                g_signal_handler_disconnect (p->device_manager, p->device_added_id);
-                g_signal_handler_disconnect (p->device_manager, p->device_removed_id);
-                p->device_manager = NULL;
+        if (p->have_xkb) {
+                gdk_window_remove_filter (NULL,
+                                          numlock_xkb_callback,
+                                          manager);
         }
 
-	remove_xkb_filter (manager);
+        csd_keyboard_xkb_shutdown ();
+}
+
+static GObject *
+csd_keyboard_manager_constructor (GType                  type,
+                                  guint                  n_construct_properties,
+                                  GObjectConstructParam *construct_properties)
+{
+        CsdKeyboardManager      *keyboard_manager;
+
+        keyboard_manager = CSD_KEYBOARD_MANAGER (G_OBJECT_CLASS (csd_keyboard_manager_parent_class)->constructor (type,
+                                                                                                      n_construct_properties,
+                                                                                                      construct_properties));
 
-        set_input_sources_switcher (manager, FALSE);
+        return G_OBJECT (keyboard_manager);
 }
 
 static void
@@ -1664,6 +456,7 @@
 {
         GObjectClass   *object_class = G_OBJECT_CLASS (klass);
 
+        object_class->constructor = csd_keyboard_manager_constructor;
         object_class->finalize = csd_keyboard_manager_finalize;
 
         g_type_class_add_private (klass, sizeof (CsdKeyboardManagerPrivate));
Index: sagarmatha-settings-daemon-3.6.4/plugins/keyboard/csd-keyboard-manager.h
===================================================================
--- sagarmatha-settings-daemon-3.6.4.orig/plugins/keyboard/csd-keyboard-manager.h	2013-02-18 12:57:16.535698777 +0000
+++ sagarmatha-settings-daemon-3.6.4/plugins/keyboard/csd-keyboard-manager.h	2013-02-18 12:57:16.523698776 +0000
@@ -51,6 +51,7 @@
 gboolean                csd_keyboard_manager_start               (CsdKeyboardManager *manager,
                                                                GError         **error);
 void                    csd_keyboard_manager_stop                (CsdKeyboardManager *manager);
+void                    csd_keyboard_manager_apply_settings      (CsdKeyboardManager *manager);
 
 G_END_DECLS
 
Index: sagarmatha-settings-daemon-3.6.4/plugins/keyboard/csd-keyboard-xkb.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ sagarmatha-settings-daemon-3.6.4/plugins/keyboard/csd-keyboard-xkb.c	2013-02-18 12:57:16.523698776 +0000
@@ -0,0 +1,851 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2001 Udaltsoft
+ *
+ * Written by Sergey V. Oudaltsov <svu@users.sourceforge.net>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ */
+
+#include "config.h"
+
+#include <string.h>
+#include <time.h>
+
+#include <glib/gi18n.h>
+#include <gdk/gdk.h>
+#include <gdk/gdkx.h>
+#include <gtk/gtk.h>
+
+#ifndef HAVE_APPINDICATOR
+#include <libgnomekbd/gkbd-status.h>
+#endif
+#include <libgnomekbd/gkbd-keyboard-drawing.h>
+#include <libgnomekbd/gkbd-desktop-config.h>
+#include <libgnomekbd/gkbd-indicator-config.h>
+#include <libgnomekbd/gkbd-keyboard-config.h>
+#include <libgnomekbd/gkbd-util.h>
+
+#ifdef HAVE_APPINDICATOR
+#include <libappindicator/app-indicator.h>
+#include "gkbd-configuration.h"
+#endif
+
+#include "csd-keyboard-xkb.h"
+#include "delayed-dialog.h"
+#include "sagarmatha-settings-profile.h"
+
+#define SETTINGS_KEYBOARD_DIR "org.sagarmatha.settings-daemon.plugins.keyboard"
+
+static CsdKeyboardManager *manager = NULL;
+
+static XklEngine *xkl_engine;
+static XklConfigRegistry *xkl_registry = NULL;
+
+static GkbdDesktopConfig current_config;
+static GkbdKeyboardConfig current_kbd_config;
+
+/* never terminated */
+static GkbdKeyboardConfig initial_sys_kbd_config;
+
+static gboolean inited_ok = FALSE;
+
+static GSettings *settings_desktop = NULL;
+static GSettings *settings_keyboard = NULL;
+
+static PostActivationCallback pa_callback = NULL;
+static void *pa_callback_user_data = NULL;
+
+#ifdef HAVE_APPINDICATOR
+static AppIndicator *app_indicator = NULL;
+static GkbdConfiguration *gkbd_configuration = NULL;
+static GkbdIndicatorConfig current_ind_config;
+static GSList *groups_items_group = NULL;
+static size_t lang_menu_items = 0;
+
+static void state_callback (XklEngine * engine,
+                            XklEngineStateChange changeType,
+                            gint group, gboolean restore);
+static void csd_keyboard_configuration_changed (GkbdConfiguration *configuration);
+
+#else
+static GtkStatusIcon *icon = NULL;
+#endif
+
+static GHashTable *preview_dialogs = NULL;
+
+static void
+activation_error (void)
+{
+	char const *vendor;
+	GtkWidget *dialog;
+
+	vendor =
+	    ServerVendor (GDK_DISPLAY_XDISPLAY
+			  (gdk_display_get_default ()));
+
+	/* VNC viewers will not work, do not barrage them with warnings */
+	if (NULL != vendor && NULL != strstr (vendor, "VNC"))
+		return;
+
+	dialog = gtk_message_dialog_new_with_markup (NULL,
+						     0,
+						     GTK_MESSAGE_ERROR,
+						     GTK_BUTTONS_CLOSE,
+						     _
+						     ("Error activating XKB configuration.\n"
+						      "There can be various reasons for that.\n\n"
+						      "If you report this situation as a bug, include the results of\n"
+						      " • <b>%s</b>\n"
+						      " • <b>%s</b>\n"
+						      " • <b>%s</b>\n"
+						      " • <b>%s</b>"),
+						     "xprop -root | grep XKB",
+						     "gsettings get org.gnome.libgnomekbd.keyboard model",
+						     "gsettings get org.gnome.libgnomekbd.keyboard layouts",
+						     "gsettings get org.gnome.libgnomekbd.keyboard options");
+	g_signal_connect (dialog, "response",
+			  G_CALLBACK (gtk_widget_destroy), NULL);
+	csd_delayed_show_dialog (dialog);
+}
+
+static gboolean
+ensure_xkl_registry (void)
+{
+	if (!xkl_registry) {
+		xkl_registry =
+		    xkl_config_registry_get_instance (xkl_engine);
+		/* load all materials, unconditionally! */
+		if (!xkl_config_registry_load (xkl_registry, TRUE)) {
+			g_object_unref (xkl_registry);
+			xkl_registry = NULL;
+			return FALSE;
+		}
+	}
+
+	return TRUE;
+}
+
+static void
+apply_desktop_settings (void)
+{
+	if (!inited_ok)
+		return;
+
+	csd_keyboard_manager_apply_settings (manager);
+	gkbd_desktop_config_load (&current_config);
+	/* again, probably it would be nice to compare things
+	   before activating them */
+	gkbd_desktop_config_activate (&current_config);
+}
+
+static void
+popup_menu_launch_capplet ()
+{
+	GAppInfo *info;
+	GdkAppLaunchContext *ctx;
+	GError *error = NULL;
+
+	info =
+	    g_app_info_create_from_commandline
+	    ("sagarmatha-settings region", NULL, 0, &error);
+
+	if (info != NULL) {
+		ctx =
+		    gdk_display_get_app_launch_context
+		    (gdk_display_get_default ());
+
+		if (g_app_info_launch (info, NULL,
+				   G_APP_LAUNCH_CONTEXT (ctx), &error) == FALSE) {
+			g_warning
+				("Could not execute keyboard properties capplet: [%s]\n",
+				 error->message);
+			g_error_free (error);
+		}
+
+		g_object_unref (info);
+		g_object_unref (ctx);
+	}
+
+}
+
+static void
+show_layout_destroy (GtkWidget * dialog, gint group)
+{
+	g_hash_table_remove (preview_dialogs, GINT_TO_POINTER (group));
+}
+
+static void
+popup_menu_show_layout ()
+{
+	GtkWidget *dialog;
+	XklEngine *engine =
+	    xkl_engine_get_instance (GDK_DISPLAY_XDISPLAY
+				     (gdk_display_get_default ()));
+	XklState *xkl_state = xkl_engine_get_current_state (engine);
+#ifdef HAVE_APPINDICATOR
+	gchar **group_names = gkbd_configuration_get_group_names (gkbd_configuration);
+#else
+	gchar **group_names = gkbd_status_get_group_names ();
+#endif
+	gpointer p = g_hash_table_lookup (preview_dialogs,
+					  GINT_TO_POINTER
+					  (xkl_state->group));
+
+	if (xkl_state->group < 0
+	    || xkl_state->group >= g_strv_length (group_names)) {
+		return;
+	}
+
+	if (p != NULL) {
+		/* existing window */
+		gtk_window_present (GTK_WINDOW (p));
+		return;
+	}
+
+	if (!ensure_xkl_registry ())
+		return;
+
+	dialog = gkbd_keyboard_drawing_dialog_new ();
+	gkbd_keyboard_drawing_dialog_set_group (dialog, xkl_registry, xkl_state->group);
+
+	g_signal_connect (dialog, "destroy",
+			  G_CALLBACK (show_layout_destroy),
+			  GINT_TO_POINTER (xkl_state->group));
+	g_hash_table_insert (preview_dialogs,
+			     GINT_TO_POINTER (xkl_state->group), dialog);
+	gtk_widget_show_all (dialog);
+}
+
+static void
+popup_menu_set_group (gint group_number, gboolean only_menu)
+{
+#ifdef HAVE_APPINDICATOR
+	XklEngine *engine = gkbd_configuration_get_xkl_engine (gkbd_configuration);
+#else
+	XklEngine *engine = gkbd_status_get_xkl_engine ();
+#endif
+	XklState *st = xkl_engine_get_current_state(engine);
+	Window cur;
+	st->group = group_number;
+	xkl_engine_allow_one_switch_to_secondary_group (engine);
+	cur = xkl_engine_get_current_window (engine);
+	if (cur != (Window) NULL) {
+		xkl_debug (150, "Enforcing the state %d for window %lx\n",
+			   st->group, cur);
+#ifdef HAVE_APPINDICATOR
+                // Setting the state may trigger state_callback to be called, which will then
+                // cause popup_menu_set_group to be called again.
+                g_signal_handlers_block_by_func (engine, G_CALLBACK (state_callback), NULL);
+#endif
+		xkl_engine_save_state (engine,
+				       xkl_engine_get_current_window
+				       (engine), st);
+#ifdef HAVE_APPINDICATOR
+                g_signal_handlers_unblock_by_func (engine, G_CALLBACK (state_callback), NULL);
+#endif
+/*    XSetInputFocus( GDK_DISPLAY(), cur, RevertToNone, CurrentTime );*/
+	} else {
+		xkl_debug (150,
+			   "??? Enforcing the state %d for unknown window\n",
+			   st->group);
+		/* strange situation - bad things can happen */
+	}
+        if (!only_menu)
+        	xkl_engine_lock_group (engine, st->group);
+#ifdef HAVE_APPINDICATOR
+	XklConfigRec * xklrec = xkl_config_rec_new();
+	xkl_config_rec_get_from_server (xklrec, engine);
+	XklConfigRegistry *registry = xkl_config_registry_get_instance(engine);
+
+	gkbd_keyboard_config_load_from_x_current (&current_kbd_config, xklrec);
+	xkl_config_registry_load (registry, current_config.load_extra_items);
+
+	int g;
+
+        if (current_ind_config.show_flags) {
+	        gchar *image_file = gkbd_indicator_config_get_images_file (&current_ind_config,
+						              &current_kbd_config,
+						              st->group);
+
+        
+                app_indicator_set_icon_full(app_indicator, image_file, _("Keyboard"));
+	        app_indicator_set_label(app_indicator, NULL, NULL);
+                g_free(image_file);
+        } else {
+                gchar * guide = "XXX";
+	        gchar ** shortnames;
+	        gchar ** longnames;
+	        gchar * layout_name = NULL;
+	        gchar * lname = NULL;
+	        GHashTable *ln2cnt_map = g_hash_table_new_full (g_str_hash, g_str_equal, (GDestroyNotify) g_free, NULL);
+
+	        gkbd_desktop_config_load_group_descriptions(&current_config, registry, 
+		        (const gchar **) xklrec->layouts, 
+		        (const gchar **) xklrec->variants,
+		        &shortnames,
+		        &longnames); 
+
+	        for (g = 0; g < g_strv_length (shortnames);g++) {
+		        gpointer pcounter = NULL;
+		        gchar *prev_layout_name = NULL;
+		        int counter = 0;
+
+		        if (g < g_strv_length (shortnames)) {
+			        if (xkl_engine_get_features (engine) &
+			            XKLF_MULTIPLE_LAYOUTS_SUPPORTED) {
+				        gchar *longname = (gchar *) current_kbd_config.layouts_variants[g];
+				        gchar *variant_name;
+				        if (!gkbd_keyboard_config_split_items (longname, &lname, &variant_name))
+					        /* just in case */
+					        lname = longname;
+
+				        if (shortnames != NULL) {
+					        gchar *shortname = shortnames[g];
+					        if (shortname != NULL && *shortname != '\0') {
+						        lname = shortname;
+					        }
+				        }
+			        } else {
+				        lname = longnames[g];
+			        }
+		        }
+		        if (lname == NULL)
+			        lname = "";
+
+		        /* Process layouts with repeating description */
+		        if (g_hash_table_lookup_extended (ln2cnt_map, lname, (gpointer *) & prev_layout_name, &pcounter)) {
+			        /* "next" same description */
+			        counter = GPOINTER_TO_INT (pcounter);
+                                guide = "XXX1";
+		        }
+		        g_hash_table_insert (ln2cnt_map, g_strdup (lname), GINT_TO_POINTER (counter+1));
+
+		        if (st->group == g) {
+			        if (counter > 0) {
+				        gchar appendix[10] = "";
+				        gint utf8length;
+				        gunichar cidx;
+				        /* Unicode subscript 2, 3, 4 */
+				        cidx = 0x2081 + counter;
+				        utf8length = g_unichar_to_utf8 (cidx, appendix);
+				        appendix[utf8length] = '\0';
+				        layout_name = g_strconcat (lname, appendix, NULL);
+			        } else {
+				        layout_name = g_strdup(lname);
+			        }
+		        }
+	        }
+
+	        // Guide of 3 wide-ish and one thin
+	        app_indicator_set_label(app_indicator, layout_name, guide);
+	        g_hash_table_destroy(ln2cnt_map);
+	        g_free(layout_name);
+	        g_strfreev(longnames);
+	        g_strfreev(shortnames);
+        }
+
+        // Refresh popup menu
+        csd_keyboard_configuration_changed (gkbd_configuration);
+
+	g_object_unref (G_OBJECT (xklrec));
+	g_object_unref (G_OBJECT (registry));
+#endif
+}
+
+static void
+popup_menu_set_group_cb (GtkMenuItem * item, gpointer param)
+{
+	gint group_number = GPOINTER_TO_INT (param);
+
+#ifdef HAVE_APPINDICATOR
+	if ((item) != NULL && (!gtk_check_menu_item_get_active (GTK_CHECK_MENU_ITEM (item))))
+		return;
+#endif
+
+	popup_menu_set_group(group_number, FALSE);
+}
+
+#ifdef HAVE_APPINDICATOR
+static void
+state_callback (XklEngine * engine,
+		XklEngineStateChange changeType,
+		gint group, gboolean restore)
+{
+	if ((changeType == GROUP_CHANGED) || (changeType == INDICATORS_CHANGED))
+		popup_menu_set_group (GINT_TO_POINTER(group), TRUE);
+}
+
+static int
+get_current_group(void)
+{
+	XklEngine *engine = gkbd_configuration_get_xkl_engine (gkbd_configuration);
+	return xkl_engine_get_current_window_group (engine);
+}
+#endif
+
+static GtkMenu *
+create_status_menu (void)
+{
+	GtkMenu *popup_menu = GTK_MENU (gtk_menu_new ());
+	int i = 0;
+#ifdef HAVE_APPINDICATOR
+	const char * const *current_name = gkbd_configuration_get_group_names (gkbd_configuration);
+	groups_items_group = NULL;
+        GtkWidget *item;
+	int group = get_current_group();
+	lang_menu_items = 0;
+#else
+	GtkMenu *groups_menu = GTK_MENU (gtk_menu_new ());
+	gchar **current_name = gkbd_status_get_group_names ();
+
+	GtkWidget *item = gtk_menu_item_new_with_mnemonic (_("_Layouts"));
+	gtk_widget_show (item);
+	gtk_menu_shell_append (GTK_MENU_SHELL (popup_menu), item);
+	gtk_menu_item_set_submenu (GTK_MENU_ITEM (item),
+				   GTK_WIDGET (groups_menu));
+
+	item = gtk_menu_item_new_with_mnemonic (_("Show _Keyboard Layout..."));
+	gtk_widget_show (item);
+	g_signal_connect (item, "activate", popup_menu_show_layout, NULL);
+	gtk_menu_shell_append (GTK_MENU_SHELL (popup_menu), item);
+
+	/* translators note:
+	 * This is the name of the sagarmatha settings "region" panel */
+	item = gtk_menu_item_new_with_mnemonic (_("Region and Language Settings"));
+	gtk_widget_show (item);
+	g_signal_connect (item, "activate", popup_menu_launch_capplet, NULL);
+	gtk_menu_shell_append (GTK_MENU_SHELL (popup_menu), item);
+#endif
+
+	for (i = 0; current_name && *current_name; i++, current_name++) {
+#ifdef HAVE_APPINDICATOR
+		item = gtk_radio_menu_item_new_with_label (groups_items_group, *current_name);
+		groups_items_group = gtk_radio_menu_item_get_group (GTK_RADIO_MENU_ITEM (item));
+
+		gtk_check_menu_item_set_active (GTK_CHECK_MENU_ITEM (item),
+						i == group);
+
+		gtk_widget_show (item);
+		gtk_menu_shell_append (GTK_MENU_SHELL (popup_menu), item);
+		g_signal_connect (item, "activate",
+				  G_CALLBACK (popup_menu_set_group_cb),
+				  GINT_TO_POINTER (i));
+		lang_menu_items++;
+#else
+		gchar *image_file = gkbd_status_get_image_filename (i);
+
+		if (image_file == NULL) {
+			item =
+			    gtk_menu_item_new_with_label (*current_name);
+		} else {
+			GdkPixbuf *pixbuf =
+			    gdk_pixbuf_new_from_file_at_size (image_file,
+							      24, 24,
+							      NULL);
+			GtkWidget *img =
+			    gtk_image_new_from_pixbuf (pixbuf);
+			item =
+			    gtk_image_menu_item_new_with_label
+			    (*current_name);
+			gtk_widget_show (img);
+			gtk_image_menu_item_set_image (GTK_IMAGE_MENU_ITEM
+						       (item), img);
+			gtk_image_menu_item_set_always_show_image
+			    (GTK_IMAGE_MENU_ITEM (item), TRUE);
+			g_free (image_file);
+		}
+		gtk_widget_show (item);
+		gtk_menu_shell_append (GTK_MENU_SHELL (groups_menu), item);
+		g_signal_connect (item, "activate",
+				  G_CALLBACK (popup_menu_set_group_cb),
+				  GINT_TO_POINTER (i));
+#endif
+	}
+
+#ifdef HAVE_APPINDICATOR
+        item = gtk_separator_menu_item_new();
+        gtk_widget_show(item);
+        gtk_menu_shell_append(GTK_MENU_SHELL (popup_menu), item);
+
+	item =
+	    gtk_menu_item_new_with_mnemonic (_("Show _Layout Chart"));
+	gtk_widget_show (item);
+	g_signal_connect (item, "activate", popup_menu_show_layout,
+			  NULL);
+	gtk_menu_shell_append (GTK_MENU_SHELL (popup_menu), item);
+
+	item = gtk_menu_item_new_with_mnemonic (_("Keyboard Layout _Settings..."));
+	gtk_widget_show (item);
+	g_signal_connect (item, "activate", popup_menu_launch_capplet, NULL);
+	gtk_menu_shell_append (GTK_MENU_SHELL (popup_menu), item);
+#endif
+
+	return popup_menu;
+}
+
+#ifndef HAVE_APPINDICATOR
+static void
+status_icon_popup_menu_cb (GtkStatusIcon * icon, guint button, guint time)
+{
+	GtkMenu *popup_menu = create_status_menu ();
+
+	gtk_menu_popup (popup_menu, NULL, NULL,
+			gtk_status_icon_position_menu,
+			(gpointer) icon, button, time);
+}
+#endif
+
+#ifdef HAVE_APPINDICATOR
+static void
+scroll_event (AppIndicator *indicator, gint delta, guint direction)
+{
+	g_return_if_fail(IS_APP_INDICATOR(indicator));
+	int group = get_current_group();
+
+	if ((direction == 0 && group == 0) ||
+	    (direction == 1 && group == lang_menu_items-1))
+		return;
+
+        popup_menu_set_group((direction == 0 ? group-1 : group+1), FALSE);
+}
+#endif
+
+static void
+show_hide_icon ()
+{
+	if (g_strv_length (current_kbd_config.layouts_variants) > 1) {
+#ifdef HAVE_APPINDICATOR
+		if (app_indicator == NULL) {
+			GtkMenu *popup_menu = create_status_menu ();
+
+			app_indicator = app_indicator_new ("keyboard",
+							   "keyboard",
+							   APP_INDICATOR_CATEGORY_HARDWARE);
+	                int group = get_current_group();
+	        	popup_menu_set_group(GINT_TO_POINTER(group), TRUE);
+			app_indicator_set_status (app_indicator,
+						  APP_INDICATOR_STATUS_ACTIVE);
+			app_indicator_set_menu (app_indicator,
+						popup_menu);
+			app_indicator_set_title (app_indicator, _("Keyboard"));
+			g_signal_connect (app_indicator, "scroll-event", G_CALLBACK (scroll_event), NULL);
+		} else {
+                        XklEngine *engine = gkbd_configuration_get_xkl_engine (gkbd_configuration);
+			XklState *st = xkl_engine_get_current_state(engine);
+			popup_menu_set_group(GINT_TO_POINTER(st->group), TRUE);
+                }
+#else
+		if (icon == NULL) {
+			xkl_debug (150, "Creating keyboard status icon\n");
+			icon = gkbd_status_new ();
+			g_signal_connect (icon, "popup-menu",
+					  G_CALLBACK
+					  (status_icon_popup_menu_cb),
+					  NULL);
+
+		}
+#endif
+	} else {
+#ifdef HAVE_APPINDICATOR
+		g_clear_object (&app_indicator);
+#else
+		if (icon != NULL) {
+			xkl_debug (150, "Destroying icon\n");
+			g_object_unref (icon);
+			icon = NULL;
+		}
+#endif
+	}
+}
+
+static gboolean
+try_activating_xkb_config_if_new (GkbdKeyboardConfig *
+				  current_sys_kbd_config)
+{
+	/* Activate - only if different! */
+	if (!gkbd_keyboard_config_equals
+	    (&current_kbd_config, current_sys_kbd_config)) {
+		if (gkbd_keyboard_config_activate (&current_kbd_config)) {
+			if (pa_callback != NULL) {
+				(*pa_callback) (pa_callback_user_data);
+				return TRUE;
+			}
+		} else {
+			return FALSE;
+		}
+	}
+	return TRUE;
+}
+
+static gboolean
+filter_xkb_config (void)
+{
+	XklConfigItem *item;
+	gchar *lname;
+	gchar *vname;
+	gchar **lv;
+	gboolean any_change = FALSE;
+
+	xkl_debug (100, "Filtering configuration against the registry\n");
+	if (!ensure_xkl_registry ())
+		return FALSE;
+
+	lv = current_kbd_config.layouts_variants;
+	item = xkl_config_item_new ();
+	while (*lv) {
+		xkl_debug (100, "Checking [%s]\n", *lv);
+		if (gkbd_keyboard_config_split_items (*lv, &lname, &vname)) {
+			gboolean should_be_dropped = FALSE;
+			g_snprintf (item->name, sizeof (item->name), "%s",
+				    lname);
+			if (!xkl_config_registry_find_layout
+			    (xkl_registry, item)) {
+				xkl_debug (100, "Bad layout [%s]\n",
+					   lname);
+				should_be_dropped = TRUE;
+			} else if (vname) {
+				g_snprintf (item->name,
+					    sizeof (item->name), "%s",
+					    vname);
+				if (!xkl_config_registry_find_variant
+				    (xkl_registry, lname, item)) {
+					xkl_debug (100,
+						   "Bad variant [%s(%s)]\n",
+						   lname, vname);
+					should_be_dropped = TRUE;
+				}
+			}
+			if (should_be_dropped) {
+				gkbd_strv_behead (lv);
+				any_change = TRUE;
+				continue;
+			}
+		}
+		lv++;
+	}
+	g_object_unref (item);
+	return any_change;
+}
+
+static void
+apply_xkb_settings (void)
+{
+	GkbdKeyboardConfig current_sys_kbd_config;
+
+	if (!inited_ok)
+		return;
+
+	gkbd_keyboard_config_init (&current_sys_kbd_config, xkl_engine);
+
+	gkbd_keyboard_config_load (&current_kbd_config,
+				   &initial_sys_kbd_config);
+
+	gkbd_keyboard_config_load_from_x_current (&current_sys_kbd_config,
+						  NULL);
+
+#ifdef HAVE_APPINDICATOR
+	gkbd_indicator_config_init (&current_ind_config, xkl_engine);
+	gkbd_indicator_config_load (&current_ind_config);
+
+	gkbd_indicator_config_load_image_filenames (&current_ind_config,
+						    &current_kbd_config);
+	gkbd_indicator_config_activate (&current_ind_config);
+#endif /* HAVE_APPINDICATOR */
+
+	if (!try_activating_xkb_config_if_new (&current_sys_kbd_config)) {
+		if (filter_xkb_config ()) {
+			if (!try_activating_xkb_config_if_new
+			    (&current_sys_kbd_config)) {
+				g_warning
+				    ("Could not activate the filtered XKB configuration");
+				activation_error ();
+			}
+		} else {
+			g_warning
+			    ("Could not activate the XKB configuration");
+			activation_error ();
+		}
+	} else
+		xkl_debug (100,
+			   "Actual KBD configuration was not changed: redundant notification\n");
+
+	gkbd_keyboard_config_term (&current_sys_kbd_config);
+	show_hide_icon ();
+}
+
+static void
+csd_keyboard_xkb_analyze_sysconfig (void)
+{
+	if (!inited_ok)
+		return;
+
+	gkbd_keyboard_config_init (&initial_sys_kbd_config, xkl_engine);
+	gkbd_keyboard_config_load_from_x_initial (&initial_sys_kbd_config,
+						  NULL);
+}
+
+#ifdef HAVE_APPINDICATOR
+/* When the configuration changed update the indicator */
+static void
+csd_keyboard_configuration_changed (GkbdConfiguration *configuration)
+{
+	GtkMenu *popup_menu;
+
+	if (!app_indicator)
+		return;
+
+	popup_menu = create_status_menu ();
+	app_indicator_set_menu (app_indicator,
+			popup_menu);
+}
+#endif
+
+void
+csd_keyboard_xkb_set_post_activation_callback (PostActivationCallback fun,
+					       void *user_data)
+{
+	pa_callback = fun;
+	pa_callback_user_data = user_data;
+}
+
+static GdkFilterReturn
+csd_keyboard_xkb_evt_filter (GdkXEvent * xev, GdkEvent * event)
+{
+	XEvent *xevent = (XEvent *) xev;
+	xkl_engine_filter_events (xkl_engine, xevent);
+	return GDK_FILTER_CONTINUE;
+}
+
+/* When new Keyboard is plugged in - reload the settings */
+static void
+csd_keyboard_new_device (XklEngine * engine)
+{
+	apply_desktop_settings ();
+	apply_xkb_settings ();
+}
+
+void
+csd_keyboard_xkb_init (CsdKeyboardManager * kbd_manager)
+{
+	Display *display =
+	    GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
+	sagarmatha_settings_profile_start (NULL);
+
+	gtk_icon_theme_append_search_path (gtk_icon_theme_get_default (),
+					   DATADIR G_DIR_SEPARATOR_S
+					   "icons");
+
+#ifdef HAVE_APPINDICATOR
+	gkbd_configuration = gkbd_configuration_get ();
+	g_signal_connect (gkbd_configuration, "changed",
+			  G_CALLBACK (csd_keyboard_configuration_changed), NULL);
+	g_signal_connect (gkbd_configuration, "group-changed",
+			  G_CALLBACK (csd_keyboard_configuration_changed), NULL);
+#endif
+	manager = kbd_manager;
+	sagarmatha_settings_profile_start ("xkl_engine_get_instance");
+	xkl_engine = xkl_engine_get_instance (display);
+	sagarmatha_settings_profile_end ("xkl_engine_get_instance");
+	if (xkl_engine) {
+		inited_ok = TRUE;
+
+		gkbd_desktop_config_init (&current_config, xkl_engine);
+		gkbd_keyboard_config_init (&current_kbd_config,
+					   xkl_engine);
+		xkl_engine_backup_names_prop (xkl_engine);
+		csd_keyboard_xkb_analyze_sysconfig ();
+
+		settings_desktop = g_settings_new (GKBD_DESKTOP_SCHEMA);
+		settings_keyboard = g_settings_new (GKBD_KEYBOARD_SCHEMA);
+		g_signal_connect (settings_desktop, "changed",
+				  (GCallback) apply_desktop_settings,
+				  NULL);
+		g_signal_connect (settings_keyboard, "changed",
+				  (GCallback) apply_xkb_settings, NULL);
+
+#ifdef HAVE_APPINDICATOR
+		g_signal_connect (xkl_engine, "X-state-changed", G_CALLBACK (state_callback), NULL);
+#endif
+		gdk_window_add_filter (NULL, (GdkFilterFunc)
+				       csd_keyboard_xkb_evt_filter, NULL);
+
+		if (xkl_engine_get_features (xkl_engine) &
+		    XKLF_DEVICE_DISCOVERY)
+			g_signal_connect (xkl_engine, "X-new-device",
+					  G_CALLBACK
+					  (csd_keyboard_new_device), NULL);
+
+		sagarmatha_settings_profile_start ("xkl_engine_start_listen");
+		xkl_engine_start_listen (xkl_engine,
+					 XKLL_MANAGE_LAYOUTS |
+					 XKLL_MANAGE_WINDOW_STATES);
+		sagarmatha_settings_profile_end ("xkl_engine_start_listen");
+
+		sagarmatha_settings_profile_start ("apply_desktop_settings");
+		apply_desktop_settings ();
+		sagarmatha_settings_profile_end ("apply_desktop_settings");
+		sagarmatha_settings_profile_start ("apply_xkb_settings");
+		apply_xkb_settings ();
+		sagarmatha_settings_profile_end ("apply_xkb_settings");
+	}
+	preview_dialogs = g_hash_table_new (g_direct_hash, g_direct_equal);
+
+	sagarmatha_settings_profile_end (NULL);
+}
+
+void
+csd_keyboard_xkb_shutdown (void)
+{
+	if (!inited_ok)
+		return;
+
+	pa_callback = NULL;
+	pa_callback_user_data = NULL;
+	manager = NULL;
+
+	if (preview_dialogs != NULL)
+		g_hash_table_destroy (preview_dialogs);
+
+	if (!inited_ok)
+		return;
+
+	xkl_engine_stop_listen (xkl_engine,
+				XKLL_MANAGE_LAYOUTS |
+				XKLL_MANAGE_WINDOW_STATES);
+
+	gdk_window_remove_filter (NULL, (GdkFilterFunc)
+				  csd_keyboard_xkb_evt_filter, NULL);
+
+	g_object_unref (settings_desktop);
+	settings_desktop = NULL;
+	g_object_unref (settings_keyboard);
+	settings_keyboard = NULL;
+
+	if (xkl_registry) {
+		g_object_unref (xkl_registry);
+	}
+
+	g_object_unref (xkl_engine);
+
+	xkl_engine = NULL;
+
+#ifdef HAVE_APPINDICATOR
+	g_clear_object (&gkbd_configuration);
+#endif
+
+	inited_ok = FALSE;
+}
Index: sagarmatha-settings-daemon-3.6.4/plugins/keyboard/csd-keyboard-xkb.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ sagarmatha-settings-daemon-3.6.4/plugins/keyboard/csd-keyboard-xkb.h	2013-02-18 12:57:16.523698776 +0000
@@ -0,0 +1,39 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
+ * sagarmatha-settings-keyboard-xkb.h
+ *
+ * Copyright (C) 2001 Udaltsoft
+ *
+ * Written by Sergey V. Oudaltsov <svu@users.sourceforge.net>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ */
+
+#ifndef __CSD_KEYBOARD_XKB_H
+#define __CSD_KEYBOARD_XKB_H
+
+#include <libxklavier/xklavier.h>
+#include "csd-keyboard-manager.h"
+
+void csd_keyboard_xkb_init (CsdKeyboardManager *manager);
+void csd_keyboard_xkb_shutdown (void);
+
+typedef void (*PostActivationCallback) (void *userData);
+
+void
+csd_keyboard_xkb_set_post_activation_callback (PostActivationCallback fun,
+                                               void                  *userData);
+
+#endif
Index: sagarmatha-settings-daemon-3.6.4/plugins/keyboard/Makefile.am
===================================================================
--- sagarmatha-settings-daemon-3.6.4.orig/plugins/keyboard/Makefile.am	2013-02-18 12:57:16.535698777 +0000
+++ sagarmatha-settings-daemon-3.6.4/plugins/keyboard/Makefile.am	2013-02-18 12:57:16.523698776 +0000
@@ -20,20 +20,25 @@
 	csd-keyboard-plugin.c	\
 	csd-keyboard-manager.h	\
 	csd-keyboard-manager.c	\
+	csd-keyboard-xkb.h	\
+	csd-keyboard-xkb.c	\
+	delayed-dialog.h	\
+	delayed-dialog.c	\
+	gkbd-configuration.c	\
+	gkbd-configuration.h	\
 	$(NULL)
 
 libkeyboard_la_CPPFLAGS = \
 	-I$(top_srcdir)/sagarmatha-settings-daemon		\
 	-I$(top_srcdir)/data				\
-	-I$(top_srcdir)/plugins/common			\
 	-DDATADIR=\""$(pkgdatadir)"\"			\
-	-DLIBEXECDIR=\""$(libexecdir)"\"		\
 	-DSAGARMATHA_SETTINGS_LOCALEDIR=\""$(datadir)/locale"\" \
 	$(AM_CPPFLAGS)
 
 libkeyboard_la_CFLAGS = \
 	$(PLUGIN_CFLAGS)		\
 	$(SETTINGS_PLUGIN_CFLAGS)	\
+	$(APPINDICATOR_CFLAGS)		\
 	$(KEYBOARD_CFLAGS)		\
 	$(AM_CFLAGS)
 
@@ -41,63 +46,19 @@
 	$(CSD_PLUGIN_LDFLAGS)	\
 	$(NULL)
 
-libkeyboard_la_LIBADD  =				\
-	$(top_builddir)/plugins/common/libcommon.la	\
-	$(SETTINGS_PLUGIN_LIBS)				\
-	$(XF86MISC_LIBS)				\
-	$(KEYBOARD_LIBS)				\
+libkeyboard_la_LIBADD  = 	\
+	$(SETTINGS_PLUGIN_LIBS)	\
+	$(XF86MISC_LIBS)	\
+	$(KEYBOARD_LIBS)	\
+	$(APPINDICATOR_LIBS)	\
 	$(NULL)
 
-libexec_PROGRAMS = csd-test-keyboard
-csd_test_keyboard_SOURCES =	\
-	test-keyboard.c		\
-	csd-keyboard-manager.h	\
-	csd-keyboard-manager.c	\
-	$(NULL)
-
-csd_test_keyboard_CFLAGS = $(libkeyboard_la_CFLAGS)
-csd_test_keyboard_CPPFLAGS = $(libkeyboard_la_CPPFLAGS)
-csd_test_keyboard_LDADD = $(libkeyboard_la_LIBADD) $(top_builddir)/sagarmatha-settings-daemon/libcsd.la
-
 plugin_in_files = 		\
 	keyboard.sagarmatha-settings-plugin.in	\
 	$(NULL)
 
 plugin_DATA = $(plugin_in_files:.sagarmatha-settings-plugin.in=.sagarmatha-settings-plugin)
 
-if HAVE_IBUS
-noinst_PROGRAMS = test-keyboard-ibus-utils
-test_keyboard_ibus_utils_SOURCES = test-keyboard-ibus-utils.c
-test_keyboard_ibus_utils_CFLAGS = $(libkeyboard_la_CFLAGS)
-test_keyboard_ibus_utils_CPPFLAGS = $(libkeyboard_la_CPPFLAGS)
-test_keyboard_ibus_utils_LDADD = $(libkeyboard_la_LIBADD) $(top_builddir)/sagarmatha-settings-daemon/libcsd.la
-
-check-local: test-keyboard-ibus-utils
-	$(builddir)/test-keyboard-ibus-utils > /dev/null
-endif
-
-libexec_PROGRAMS += csd-input-sources-switcher
-
-csd_input_sources_switcher_SOURCES = 	\
-	csd-input-sources-switcher.c	\
-	$(NULL)
-
-csd_input_sources_switcher_CPPFLAGS =	\
-	-I$(top_srcdir)/data		\
-	-I$(top_srcdir)/plugins/common	\
-	$(AM_CPPFLAGS)			\
-	$(NULL)
-
-csd_input_sources_switcher_CFLAGS =	\
-	$(SETTINGS_PLUGIN_CFLAGS)	\
-	$(AM_CFLAGS)			\
-	$(NULL)
-
-csd_input_sources_switcher_LDADD  = 	\
-	$(top_builddir)/plugins/common/libcommon.la	\
-	$(SETTINGS_PLUGIN_LIBS)		\
-	$(NULL)
-
 EXTRA_DIST = 			\
 	$(icons_DATA)		\
 	$(plugin_in_files)	\
Index: sagarmatha-settings-daemon-3.6.4/plugins/keyboard/Makefile.in
===================================================================
--- sagarmatha-settings-daemon-3.6.4.orig/plugins/keyboard/Makefile.in	2013-02-18 12:57:16.535698777 +0000
+++ sagarmatha-settings-daemon-3.6.4/plugins/keyboard/Makefile.in	2013-02-18 12:57:16.527698777 +0000
@@ -1,8 +1,9 @@
-# Makefile.in generated by automake 1.12.2 from Makefile.am.
+# Makefile.in generated by automake 1.11.3 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2012 Free Software Foundation, Inc.
-
+# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
+# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
+# Foundation, Inc.
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
@@ -15,25 +16,7 @@
 @SET_MAKE@
 
 
-
 VPATH = @srcdir@
-am__make_dryrun = \
-  { \
-    am__dry=no; \
-    case $$MAKEFLAGS in \
-      *\\[\ \	]*) \
-        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
-          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
-      *) \
-        for am__flg in $$MAKEFLAGS; do \
-          case $$am__flg in \
-            *=*|--*) ;; \
-            *n*) am__dry=yes; break;; \
-          esac; \
-        done;; \
-    esac; \
-    test $$am__dry = yes; \
-  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -52,12 +35,8 @@
 POST_UNINSTALL = :
 build_triplet = @build@
 host_triplet = @host@
-libexec_PROGRAMS = csd-test-keyboard$(EXEEXT) \
-	csd-input-sources-switcher$(EXEEXT)
-@HAVE_IBUS_TRUE@noinst_PROGRAMS = test-keyboard-ibus-utils$(EXEEXT)
 subdir = plugins/keyboard
-DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
-	$(top_srcdir)/depcomp $(top_srcdir)/mkinstalldirs
+DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
 	$(top_srcdir)/configure.ac
@@ -94,76 +73,25 @@
     || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
          $(am__cd) "$$dir" && rm -f $$files; }; \
   }
-am__installdirs = "$(DESTDIR)$(plugindir)" "$(DESTDIR)$(libexecdir)" \
-	"$(DESTDIR)$(iconsdir)" "$(DESTDIR)$(plugindir)"
+am__installdirs = "$(DESTDIR)$(plugindir)" "$(DESTDIR)$(iconsdir)" \
+	"$(DESTDIR)$(plugindir)"
 LTLIBRARIES = $(plugin_LTLIBRARIES)
 am__DEPENDENCIES_1 =
-libkeyboard_la_DEPENDENCIES =  \
-	$(top_builddir)/plugins/common/libcommon.la \
-	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
-	$(am__DEPENDENCIES_1)
+libkeyboard_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \
+	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
 am__objects_1 =
 am_libkeyboard_la_OBJECTS = libkeyboard_la-csd-keyboard-plugin.lo \
-	libkeyboard_la-csd-keyboard-manager.lo $(am__objects_1)
+	libkeyboard_la-csd-keyboard-manager.lo \
+	libkeyboard_la-csd-keyboard-xkb.lo \
+	libkeyboard_la-delayed-dialog.lo $(am__objects_1)
 libkeyboard_la_OBJECTS = $(am_libkeyboard_la_OBJECTS)
 AM_V_lt = $(am__v_lt_@AM_V@)
 am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
 am__v_lt_0 = --silent
-am__v_lt_1 = 
 libkeyboard_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
 	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
 	$(libkeyboard_la_CFLAGS) $(CFLAGS) $(libkeyboard_la_LDFLAGS) \
 	$(LDFLAGS) -o $@
-PROGRAMS = $(libexec_PROGRAMS) $(noinst_PROGRAMS)
-am_csd_input_sources_switcher_OBJECTS = csd_input_sources_switcher-csd-input-sources-switcher.$(OBJEXT) \
-	$(am__objects_1)
-csd_input_sources_switcher_OBJECTS =  \
-	$(am_csd_input_sources_switcher_OBJECTS)
-csd_input_sources_switcher_DEPENDENCIES =  \
-	$(top_builddir)/plugins/common/libcommon.la \
-	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
-csd_input_sources_switcher_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
-	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
-	$(csd_input_sources_switcher_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
-	$(LDFLAGS) -o $@
-am_csd_test_keyboard_OBJECTS =  \
-	csd_test_keyboard-test-keyboard.$(OBJEXT) \
-	csd_test_keyboard-csd-keyboard-manager.$(OBJEXT) \
-	$(am__objects_1)
-csd_test_keyboard_OBJECTS = $(am_csd_test_keyboard_OBJECTS)
-am__DEPENDENCIES_2 = $(top_builddir)/plugins/common/libcommon.la \
-	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
-	$(am__DEPENDENCIES_1)
-csd_test_keyboard_DEPENDENCIES = $(am__DEPENDENCIES_2) \
-	$(top_builddir)/sagarmatha-settings-daemon/libcsd.la
-csd_test_keyboard_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
-	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
-	$(csd_test_keyboard_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
-	-o $@
-am__test_keyboard_ibus_utils_SOURCES_DIST =  \
-	test-keyboard-ibus-utils.c
-@HAVE_IBUS_TRUE@am_test_keyboard_ibus_utils_OBJECTS = test_keyboard_ibus_utils-test-keyboard-ibus-utils.$(OBJEXT)
-test_keyboard_ibus_utils_OBJECTS =  \
-	$(am_test_keyboard_ibus_utils_OBJECTS)
-@HAVE_IBUS_TRUE@test_keyboard_ibus_utils_DEPENDENCIES =  \
-@HAVE_IBUS_TRUE@	$(am__DEPENDENCIES_2) \
-@HAVE_IBUS_TRUE@	$(top_builddir)/sagarmatha-settings-daemon/libcsd.la
-test_keyboard_ibus_utils_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
-	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
-	$(test_keyboard_ibus_utils_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
-	$(LDFLAGS) -o $@
-AM_V_P = $(am__v_P_@AM_V@)
-am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
-am__v_P_0 = false
-am__v_P_1 = :
-AM_V_GEN = $(am__v_GEN_@AM_V@)
-am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
-am__v_GEN_0 = @echo "  GEN     " $@;
-am__v_GEN_1 = 
-AM_V_at = $(am__v_at_@AM_V@)
-am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
-am__v_at_0 = @
-am__v_at_1 = 
 DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
 depcomp = $(SHELL) $(top_srcdir)/depcomp
 am__depfiles_maybe = depfiles
@@ -176,29 +104,22 @@
 	$(AM_CFLAGS) $(CFLAGS)
 AM_V_CC = $(am__v_CC_@AM_V@)
 am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
-am__v_CC_0 = @echo "  CC      " $@;
-am__v_CC_1 = 
+am__v_CC_0 = @echo "  CC    " $@;
+AM_V_at = $(am__v_at_@AM_V@)
+am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
+am__v_at_0 = @
 CCLD = $(CC)
 LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
 	$(AM_LDFLAGS) $(LDFLAGS) -o $@
 AM_V_CCLD = $(am__v_CCLD_@AM_V@)
 am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
-am__v_CCLD_0 = @echo "  CCLD    " $@;
-am__v_CCLD_1 = 
-SOURCES = $(libkeyboard_la_SOURCES) \
-	$(csd_input_sources_switcher_SOURCES) \
-	$(csd_test_keyboard_SOURCES) \
-	$(test_keyboard_ibus_utils_SOURCES)
-DIST_SOURCES = $(libkeyboard_la_SOURCES) \
-	$(csd_input_sources_switcher_SOURCES) \
-	$(csd_test_keyboard_SOURCES) \
-	$(am__test_keyboard_ibus_utils_SOURCES_DIST)
-am__can_run_installinfo = \
-  case $$AM_UPDATE_INFO_DIR in \
-    n|no|NO) false;; \
-    *) (install-info --version) >/dev/null 2>&1;; \
-  esac
+am__v_CCLD_0 = @echo "  CCLD  " $@;
+AM_V_GEN = $(am__v_GEN_@AM_V@)
+am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
+am__v_GEN_0 = @echo "  GEN   " $@;
+SOURCES = $(libkeyboard_la_SOURCES)
+DIST_SOURCES = $(libkeyboard_la_SOURCES)
 DATA = $(icons_DATA) $(plugin_DATA)
 ETAGS = etags
 CTAGS = ctags
@@ -252,6 +173,8 @@
 EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
+FONTCONFIG_CFLAGS = @FONTCONFIG_CFLAGS@
+FONTCONFIG_LIBS = @FONTCONFIG_LIBS@
 GETTEXT_PACKAGE = @GETTEXT_PACKAGE@
 GIOUNIX_CFLAGS = @GIOUNIX_CFLAGS@
 GIOUNIX_LIBS = @GIOUNIX_LIBS@
@@ -316,8 +239,6 @@
 NSS_LIBS = @NSS_LIBS@
 OBJDUMP = @OBJDUMP@
 OBJEXT = @OBJEXT@
-ORIENTATION_CFLAGS = @ORIENTATION_CFLAGS@
-ORIENTATION_LIBS = @ORIENTATION_LIBS@
 OTOOL = @OTOOL@
 OTOOL64 = @OTOOL64@
 PACKAGE = @PACKAGE@
@@ -336,8 +257,6 @@
 PLUGIN_CFLAGS = @PLUGIN_CFLAGS@
 POFILES = @POFILES@
 POSUB = @POSUB@
-POWER_CFLAGS = @POWER_CFLAGS@
-POWER_LIBS = @POWER_LIBS@
 PO_IN_DATADIR_FALSE = @PO_IN_DATADIR_FALSE@
 PO_IN_DATADIR_TRUE = @PO_IN_DATADIR_TRUE@
 RANLIB = @RANLIB@
@@ -348,22 +267,17 @@
 SETTINGS_PLUGIN_LIBS = @SETTINGS_PLUGIN_LIBS@
 SET_MAKE = @SET_MAKE@
 SHELL = @SHELL@
-SOUND_CFLAGS = @SOUND_CFLAGS@
-SOUND_LIBS = @SOUND_LIBS@
 STRIP = @STRIP@
 SYSTEMD_CFLAGS = @SYSTEMD_CFLAGS@
 SYSTEMD_LIBS = @SYSTEMD_LIBS@
+UPOWER_CFLAGS = @UPOWER_CFLAGS@
+UPOWER_LIBS = @UPOWER_LIBS@
 USE_NLS = @USE_NLS@
 VERSION = @VERSION@
 WACOM_CFLAGS = @WACOM_CFLAGS@
 WACOM_LIBS = @WACOM_LIBS@
 WARN_CFLAGS = @WARN_CFLAGS@
 XGETTEXT = @XGETTEXT@
-XRANDR_CFLAGS = @XRANDR_CFLAGS@
-XRANDR_LIBS = @XRANDR_LIBS@
-XSETTINGS_CFLAGS = @XSETTINGS_CFLAGS@
-XSETTINGS_LIBS = @XSETTINGS_LIBS@
-XSLTPROC = @XSLTPROC@
 abs_builddir = @abs_builddir@
 abs_srcdir = @abs_srcdir@
 abs_top_builddir = @abs_top_builddir@
@@ -440,14 +354,16 @@
 	csd-keyboard-plugin.c	\
 	csd-keyboard-manager.h	\
 	csd-keyboard-manager.c	\
+	csd-keyboard-xkb.h	\
+	csd-keyboard-xkb.c	\
+	delayed-dialog.h	\
+	delayed-dialog.c	\
 	$(NULL)
 
 libkeyboard_la_CPPFLAGS = \
 	-I$(top_srcdir)/sagarmatha-settings-daemon		\
 	-I$(top_srcdir)/data				\
-	-I$(top_srcdir)/plugins/common			\
 	-DDATADIR=\""$(pkgdatadir)"\"			\
-	-DLIBEXECDIR=\""$(libexecdir)"\"		\
 	-DSAGARMATHA_SETTINGS_LOCALEDIR=\""$(datadir)/locale"\" \
 	$(AM_CPPFLAGS)
 
@@ -462,50 +378,16 @@
 	$(NULL)
 
 libkeyboard_la_LIBADD = \
-	$(top_builddir)/plugins/common/libcommon.la	\
-	$(SETTINGS_PLUGIN_LIBS)				\
-	$(XF86MISC_LIBS)				\
-	$(KEYBOARD_LIBS)				\
-	$(NULL)
-
-csd_test_keyboard_SOURCES = \
-	test-keyboard.c		\
-	csd-keyboard-manager.h	\
-	csd-keyboard-manager.c	\
+	$(SETTINGS_PLUGIN_LIBS)	\
+	$(XF86MISC_LIBS)	\
+	$(KEYBOARD_LIBS)	\
 	$(NULL)
 
-csd_test_keyboard_CFLAGS = $(libkeyboard_la_CFLAGS)
-csd_test_keyboard_CPPFLAGS = $(libkeyboard_la_CPPFLAGS)
-csd_test_keyboard_LDADD = $(libkeyboard_la_LIBADD) $(top_builddir)/sagarmatha-settings-daemon/libcsd.la
 plugin_in_files = \
 	keyboard.sagarmatha-settings-plugin.in	\
 	$(NULL)
 
 plugin_DATA = $(plugin_in_files:.sagarmatha-settings-plugin.in=.sagarmatha-settings-plugin)
-@HAVE_IBUS_TRUE@test_keyboard_ibus_utils_SOURCES = test-keyboard-ibus-utils.c
-@HAVE_IBUS_TRUE@test_keyboard_ibus_utils_CFLAGS = $(libkeyboard_la_CFLAGS)
-@HAVE_IBUS_TRUE@test_keyboard_ibus_utils_CPPFLAGS = $(libkeyboard_la_CPPFLAGS)
-@HAVE_IBUS_TRUE@test_keyboard_ibus_utils_LDADD = $(libkeyboard_la_LIBADD) $(top_builddir)/sagarmatha-settings-daemon/libcsd.la
-csd_input_sources_switcher_SOURCES = \
-	csd-input-sources-switcher.c	\
-	$(NULL)
-
-csd_input_sources_switcher_CPPFLAGS = \
-	-I$(top_srcdir)/data		\
-	-I$(top_srcdir)/plugins/common	\
-	$(AM_CPPFLAGS)			\
-	$(NULL)
-
-csd_input_sources_switcher_CFLAGS = \
-	$(SETTINGS_PLUGIN_CFLAGS)	\
-	$(AM_CFLAGS)			\
-	$(NULL)
-
-csd_input_sources_switcher_LDADD = \
-	$(top_builddir)/plugins/common/libcommon.la	\
-	$(SETTINGS_PLUGIN_LIBS)		\
-	$(NULL)
-
 EXTRA_DIST = \
 	$(icons_DATA)		\
 	$(plugin_in_files)	\
@@ -556,6 +438,7 @@
 $(am__aclocal_m4_deps):
 install-pluginLTLIBRARIES: $(plugin_LTLIBRARIES)
 	@$(NORMAL_INSTALL)
+	test -z "$(plugindir)" || $(MKDIR_P) "$(DESTDIR)$(plugindir)"
 	@list='$(plugin_LTLIBRARIES)'; test -n "$(plugindir)" || list=; \
 	list2=; for p in $$list; do \
 	  if test -f $$p; then \
@@ -563,8 +446,6 @@
 	  else :; fi; \
 	done; \
 	test -z "$$list2" || { \
-	  echo " $(MKDIR_P) '$(DESTDIR)$(plugindir)'"; \
-	  $(MKDIR_P) "$(DESTDIR)$(plugindir)" || exit 1; \
 	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(plugindir)'"; \
 	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(plugindir)"; \
 	}
@@ -580,80 +461,14 @@
 
 clean-pluginLTLIBRARIES:
 	-test -z "$(plugin_LTLIBRARIES)" || rm -f $(plugin_LTLIBRARIES)
-	@list='$(plugin_LTLIBRARIES)'; \
-	locs=`for p in $$list; do echo $$p; done | \
-	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
-	      sort -u`; \
-	test -z "$$locs" || { \
-	  echo rm -f $${locs}; \
-	  rm -f $${locs}; \
-	}
+	@list='$(plugin_LTLIBRARIES)'; for p in $$list; do \
+	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
+	  test "$$dir" != "$$p" || dir=.; \
+	  echo "rm -f \"$${dir}/so_locations\""; \
+	  rm -f "$${dir}/so_locations"; \
+	done
 libkeyboard.la: $(libkeyboard_la_OBJECTS) $(libkeyboard_la_DEPENDENCIES) $(EXTRA_libkeyboard_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libkeyboard_la_LINK) -rpath $(plugindir) $(libkeyboard_la_OBJECTS) $(libkeyboard_la_LIBADD) $(LIBS)
-install-libexecPROGRAMS: $(libexec_PROGRAMS)
-	@$(NORMAL_INSTALL)
-	@list='$(libexec_PROGRAMS)'; test -n "$(libexecdir)" || list=; \
-	if test -n "$$list"; then \
-	  echo " $(MKDIR_P) '$(DESTDIR)$(libexecdir)'"; \
-	  $(MKDIR_P) "$(DESTDIR)$(libexecdir)" || exit 1; \
-	fi; \
-	for p in $$list; do echo "$$p $$p"; done | \
-	sed 's/$(EXEEXT)$$//' | \
-	while read p p1; do if test -f $$p || test -f $$p1; \
-	  then echo "$$p"; echo "$$p"; else :; fi; \
-	done | \
-	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
-	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
-	sed 'N;N;N;s,\n, ,g' | \
-	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
-	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
-	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
-	    else { print "f", $$3 "/" $$4, $$1; } } \
-	  END { for (d in files) print "f", d, files[d] }' | \
-	while read type dir files; do \
-	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
-	    test -z "$$files" || { \
-	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(libexecdir)$$dir'"; \
-	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(libexecdir)$$dir" || exit $$?; \
-	    } \
-	; done
-
-uninstall-libexecPROGRAMS:
-	@$(NORMAL_UNINSTALL)
-	@list='$(libexec_PROGRAMS)'; test -n "$(libexecdir)" || list=; \
-	files=`for p in $$list; do echo "$$p"; done | \
-	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
-	      -e 's/$$/$(EXEEXT)/' `; \
-	test -n "$$list" || exit 0; \
-	echo " ( cd '$(DESTDIR)$(libexecdir)' && rm -f" $$files ")"; \
-	cd "$(DESTDIR)$(libexecdir)" && rm -f $$files
-
-clean-libexecPROGRAMS:
-	@list='$(libexec_PROGRAMS)'; test -n "$$list" || exit 0; \
-	echo " rm -f" $$list; \
-	rm -f $$list || exit $$?; \
-	test -n "$(EXEEXT)" || exit 0; \
-	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
-	echo " rm -f" $$list; \
-	rm -f $$list
-
-clean-noinstPROGRAMS:
-	@list='$(noinst_PROGRAMS)'; test -n "$$list" || exit 0; \
-	echo " rm -f" $$list; \
-	rm -f $$list || exit $$?; \
-	test -n "$(EXEEXT)" || exit 0; \
-	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
-	echo " rm -f" $$list; \
-	rm -f $$list
-csd-input-sources-switcher$(EXEEXT): $(csd_input_sources_switcher_OBJECTS) $(csd_input_sources_switcher_DEPENDENCIES) $(EXTRA_csd_input_sources_switcher_DEPENDENCIES) 
-	@rm -f csd-input-sources-switcher$(EXEEXT)
-	$(AM_V_CCLD)$(csd_input_sources_switcher_LINK) $(csd_input_sources_switcher_OBJECTS) $(csd_input_sources_switcher_LDADD) $(LIBS)
-csd-test-keyboard$(EXEEXT): $(csd_test_keyboard_OBJECTS) $(csd_test_keyboard_DEPENDENCIES) $(EXTRA_csd_test_keyboard_DEPENDENCIES) 
-	@rm -f csd-test-keyboard$(EXEEXT)
-	$(AM_V_CCLD)$(csd_test_keyboard_LINK) $(csd_test_keyboard_OBJECTS) $(csd_test_keyboard_LDADD) $(LIBS)
-test-keyboard-ibus-utils$(EXEEXT): $(test_keyboard_ibus_utils_OBJECTS) $(test_keyboard_ibus_utils_DEPENDENCIES) $(EXTRA_test_keyboard_ibus_utils_DEPENDENCIES) 
-	@rm -f test-keyboard-ibus-utils$(EXEEXT)
-	$(AM_V_CCLD)$(test_keyboard_ibus_utils_LINK) $(test_keyboard_ibus_utils_OBJECTS) $(test_keyboard_ibus_utils_LDADD) $(LIBS)
 
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT)
@@ -661,12 +476,10 @@
 distclean-compile:
 	-rm -f *.tab.c
 
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/csd_input_sources_switcher-csd-input-sources-switcher.Po@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/csd_test_keyboard-csd-keyboard-manager.Po@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/csd_test_keyboard-test-keyboard.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libkeyboard_la-delayed-dialog.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libkeyboard_la-csd-keyboard-manager.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libkeyboard_la-csd-keyboard-plugin.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_keyboard_ibus_utils-test-keyboard-ibus-utils.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libkeyboard_la-csd-keyboard-xkb.Plo@am__quote@
 
 .c.o:
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@@ -703,61 +516,19 @@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkeyboard_la_CPPFLAGS) $(CPPFLAGS) $(libkeyboard_la_CFLAGS) $(CFLAGS) -c -o libkeyboard_la-csd-keyboard-manager.lo `test -f 'csd-keyboard-manager.c' || echo '$(srcdir)/'`csd-keyboard-manager.c
 
-csd_input_sources_switcher-csd-input-sources-switcher.o: csd-input-sources-switcher.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(csd_input_sources_switcher_CPPFLAGS) $(CPPFLAGS) $(csd_input_sources_switcher_CFLAGS) $(CFLAGS) -MT csd_input_sources_switcher-csd-input-sources-switcher.o -MD -MP -MF $(DEPDIR)/csd_input_sources_switcher-csd-input-sources-switcher.Tpo -c -o csd_input_sources_switcher-csd-input-sources-switcher.o `test -f 'csd-input-sources-switcher.c' || echo '$(srcdir)/'`csd-input-sources-switcher.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/csd_input_sources_switcher-csd-input-sources-switcher.Tpo $(DEPDIR)/csd_input_sources_switcher-csd-input-sources-switcher.Po
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='csd-input-sources-switcher.c' object='csd_input_sources_switcher-csd-input-sources-switcher.o' libtool=no @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(csd_input_sources_switcher_CPPFLAGS) $(CPPFLAGS) $(csd_input_sources_switcher_CFLAGS) $(CFLAGS) -c -o csd_input_sources_switcher-csd-input-sources-switcher.o `test -f 'csd-input-sources-switcher.c' || echo '$(srcdir)/'`csd-input-sources-switcher.c
-
-csd_input_sources_switcher-csd-input-sources-switcher.obj: csd-input-sources-switcher.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(csd_input_sources_switcher_CPPFLAGS) $(CPPFLAGS) $(csd_input_sources_switcher_CFLAGS) $(CFLAGS) -MT csd_input_sources_switcher-csd-input-sources-switcher.obj -MD -MP -MF $(DEPDIR)/csd_input_sources_switcher-csd-input-sources-switcher.Tpo -c -o csd_input_sources_switcher-csd-input-sources-switcher.obj `if test -f 'csd-input-sources-switcher.c'; then $(CYGPATH_W) 'csd-input-sources-switcher.c'; else $(CYGPATH_W) '$(srcdir)/csd-input-sources-switcher.c'; fi`
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/csd_input_sources_switcher-csd-input-sources-switcher.Tpo $(DEPDIR)/csd_input_sources_switcher-csd-input-sources-switcher.Po
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='csd-input-sources-switcher.c' object='csd_input_sources_switcher-csd-input-sources-switcher.obj' libtool=no @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(csd_input_sources_switcher_CPPFLAGS) $(CPPFLAGS) $(csd_input_sources_switcher_CFLAGS) $(CFLAGS) -c -o csd_input_sources_switcher-csd-input-sources-switcher.obj `if test -f 'csd-input-sources-switcher.c'; then $(CYGPATH_W) 'csd-input-sources-switcher.c'; else $(CYGPATH_W) '$(srcdir)/csd-input-sources-switcher.c'; fi`
-
-csd_test_keyboard-test-keyboard.o: test-keyboard.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(csd_test_keyboard_CPPFLAGS) $(CPPFLAGS) $(csd_test_keyboard_CFLAGS) $(CFLAGS) -MT csd_test_keyboard-test-keyboard.o -MD -MP -MF $(DEPDIR)/csd_test_keyboard-test-keyboard.Tpo -c -o csd_test_keyboard-test-keyboard.o `test -f 'test-keyboard.c' || echo '$(srcdir)/'`test-keyboard.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/csd_test_keyboard-test-keyboard.Tpo $(DEPDIR)/csd_test_keyboard-test-keyboard.Po
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='test-keyboard.c' object='csd_test_keyboard-test-keyboard.o' libtool=no @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(csd_test_keyboard_CPPFLAGS) $(CPPFLAGS) $(csd_test_keyboard_CFLAGS) $(CFLAGS) -c -o csd_test_keyboard-test-keyboard.o `test -f 'test-keyboard.c' || echo '$(srcdir)/'`test-keyboard.c
-
-csd_test_keyboard-test-keyboard.obj: test-keyboard.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(csd_test_keyboard_CPPFLAGS) $(CPPFLAGS) $(csd_test_keyboard_CFLAGS) $(CFLAGS) -MT csd_test_keyboard-test-keyboard.obj -MD -MP -MF $(DEPDIR)/csd_test_keyboard-test-keyboard.Tpo -c -o csd_test_keyboard-test-keyboard.obj `if test -f 'test-keyboard.c'; then $(CYGPATH_W) 'test-keyboard.c'; else $(CYGPATH_W) '$(srcdir)/test-keyboard.c'; fi`
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/csd_test_keyboard-test-keyboard.Tpo $(DEPDIR)/csd_test_keyboard-test-keyboard.Po
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='test-keyboard.c' object='csd_test_keyboard-test-keyboard.obj' libtool=no @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(csd_test_keyboard_CPPFLAGS) $(CPPFLAGS) $(csd_test_keyboard_CFLAGS) $(CFLAGS) -c -o csd_test_keyboard-test-keyboard.obj `if test -f 'test-keyboard.c'; then $(CYGPATH_W) 'test-keyboard.c'; else $(CYGPATH_W) '$(srcdir)/test-keyboard.c'; fi`
-
-csd_test_keyboard-csd-keyboard-manager.o: csd-keyboard-manager.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(csd_test_keyboard_CPPFLAGS) $(CPPFLAGS) $(csd_test_keyboard_CFLAGS) $(CFLAGS) -MT csd_test_keyboard-csd-keyboard-manager.o -MD -MP -MF $(DEPDIR)/csd_test_keyboard-csd-keyboard-manager.Tpo -c -o csd_test_keyboard-csd-keyboard-manager.o `test -f 'csd-keyboard-manager.c' || echo '$(srcdir)/'`csd-keyboard-manager.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/csd_test_keyboard-csd-keyboard-manager.Tpo $(DEPDIR)/csd_test_keyboard-csd-keyboard-manager.Po
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='csd-keyboard-manager.c' object='csd_test_keyboard-csd-keyboard-manager.o' libtool=no @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(csd_test_keyboard_CPPFLAGS) $(CPPFLAGS) $(csd_test_keyboard_CFLAGS) $(CFLAGS) -c -o csd_test_keyboard-csd-keyboard-manager.o `test -f 'csd-keyboard-manager.c' || echo '$(srcdir)/'`csd-keyboard-manager.c
-
-csd_test_keyboard-csd-keyboard-manager.obj: csd-keyboard-manager.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(csd_test_keyboard_CPPFLAGS) $(CPPFLAGS) $(csd_test_keyboard_CFLAGS) $(CFLAGS) -MT csd_test_keyboard-csd-keyboard-manager.obj -MD -MP -MF $(DEPDIR)/csd_test_keyboard-csd-keyboard-manager.Tpo -c -o csd_test_keyboard-csd-keyboard-manager.obj `if test -f 'csd-keyboard-manager.c'; then $(CYGPATH_W) 'csd-keyboard-manager.c'; else $(CYGPATH_W) '$(srcdir)/csd-keyboard-manager.c'; fi`
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/csd_test_keyboard-csd-keyboard-manager.Tpo $(DEPDIR)/csd_test_keyboard-csd-keyboard-manager.Po
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='csd-keyboard-manager.c' object='csd_test_keyboard-csd-keyboard-manager.obj' libtool=no @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(csd_test_keyboard_CPPFLAGS) $(CPPFLAGS) $(csd_test_keyboard_CFLAGS) $(CFLAGS) -c -o csd_test_keyboard-csd-keyboard-manager.obj `if test -f 'csd-keyboard-manager.c'; then $(CYGPATH_W) 'csd-keyboard-manager.c'; else $(CYGPATH_W) '$(srcdir)/csd-keyboard-manager.c'; fi`
-
-test_keyboard_ibus_utils-test-keyboard-ibus-utils.o: test-keyboard-ibus-utils.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_keyboard_ibus_utils_CPPFLAGS) $(CPPFLAGS) $(test_keyboard_ibus_utils_CFLAGS) $(CFLAGS) -MT test_keyboard_ibus_utils-test-keyboard-ibus-utils.o -MD -MP -MF $(DEPDIR)/test_keyboard_ibus_utils-test-keyboard-ibus-utils.Tpo -c -o test_keyboard_ibus_utils-test-keyboard-ibus-utils.o `test -f 'test-keyboard-ibus-utils.c' || echo '$(srcdir)/'`test-keyboard-ibus-utils.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/test_keyboard_ibus_utils-test-keyboard-ibus-utils.Tpo $(DEPDIR)/test_keyboard_ibus_utils-test-keyboard-ibus-utils.Po
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='test-keyboard-ibus-utils.c' object='test_keyboard_ibus_utils-test-keyboard-ibus-utils.o' libtool=no @AMDEPBACKSLASH@
+libkeyboard_la-csd-keyboard-xkb.lo: csd-keyboard-xkb.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkeyboard_la_CPPFLAGS) $(CPPFLAGS) $(libkeyboard_la_CFLAGS) $(CFLAGS) -MT libkeyboard_la-csd-keyboard-xkb.lo -MD -MP -MF $(DEPDIR)/libkeyboard_la-csd-keyboard-xkb.Tpo -c -o libkeyboard_la-csd-keyboard-xkb.lo `test -f 'csd-keyboard-xkb.c' || echo '$(srcdir)/'`csd-keyboard-xkb.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libkeyboard_la-csd-keyboard-xkb.Tpo $(DEPDIR)/libkeyboard_la-csd-keyboard-xkb.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='csd-keyboard-xkb.c' object='libkeyboard_la-csd-keyboard-xkb.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkeyboard_la_CPPFLAGS) $(CPPFLAGS) $(libkeyboard_la_CFLAGS) $(CFLAGS) -c -o libkeyboard_la-csd-keyboard-xkb.lo `test -f 'csd-keyboard-xkb.c' || echo '$(srcdir)/'`csd-keyboard-xkb.c
+
+libkeyboard_la-delayed-dialog.lo: delayed-dialog.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkeyboard_la_CPPFLAGS) $(CPPFLAGS) $(libkeyboard_la_CFLAGS) $(CFLAGS) -MT libkeyboard_la-delayed-dialog.lo -MD -MP -MF $(DEPDIR)/libkeyboard_la-delayed-dialog.Tpo -c -o libkeyboard_la-delayed-dialog.lo `test -f 'delayed-dialog.c' || echo '$(srcdir)/'`delayed-dialog.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libkeyboard_la-delayed-dialog.Tpo $(DEPDIR)/libkeyboard_la-delayed-dialog.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='delayed-dialog.c' object='libkeyboard_la-delayed-dialog.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_keyboard_ibus_utils_CPPFLAGS) $(CPPFLAGS) $(test_keyboard_ibus_utils_CFLAGS) $(CFLAGS) -c -o test_keyboard_ibus_utils-test-keyboard-ibus-utils.o `test -f 'test-keyboard-ibus-utils.c' || echo '$(srcdir)/'`test-keyboard-ibus-utils.c
-
-test_keyboard_ibus_utils-test-keyboard-ibus-utils.obj: test-keyboard-ibus-utils.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_keyboard_ibus_utils_CPPFLAGS) $(CPPFLAGS) $(test_keyboard_ibus_utils_CFLAGS) $(CFLAGS) -MT test_keyboard_ibus_utils-test-keyboard-ibus-utils.obj -MD -MP -MF $(DEPDIR)/test_keyboard_ibus_utils-test-keyboard-ibus-utils.Tpo -c -o test_keyboard_ibus_utils-test-keyboard-ibus-utils.obj `if test -f 'test-keyboard-ibus-utils.c'; then $(CYGPATH_W) 'test-keyboard-ibus-utils.c'; else $(CYGPATH_W) '$(srcdir)/test-keyboard-ibus-utils.c'; fi`
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/test_keyboard_ibus_utils-test-keyboard-ibus-utils.Tpo $(DEPDIR)/test_keyboard_ibus_utils-test-keyboard-ibus-utils.Po
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='test-keyboard-ibus-utils.c' object='test_keyboard_ibus_utils-test-keyboard-ibus-utils.obj' libtool=no @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_keyboard_ibus_utils_CPPFLAGS) $(CPPFLAGS) $(test_keyboard_ibus_utils_CFLAGS) $(CFLAGS) -c -o test_keyboard_ibus_utils-test-keyboard-ibus-utils.obj `if test -f 'test-keyboard-ibus-utils.c'; then $(CYGPATH_W) 'test-keyboard-ibus-utils.c'; else $(CYGPATH_W) '$(srcdir)/test-keyboard-ibus-utils.c'; fi`
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkeyboard_la_CPPFLAGS) $(CPPFLAGS) $(libkeyboard_la_CFLAGS) $(CFLAGS) -c -o libkeyboard_la-delayed-dialog.lo `test -f 'delayed-dialog.c' || echo '$(srcdir)/'`delayed-dialog.c
 
 mostlyclean-libtool:
 	-rm -f *.lo
@@ -766,11 +537,8 @@
 	-rm -rf .libs _libs
 install-iconsDATA: $(icons_DATA)
 	@$(NORMAL_INSTALL)
+	test -z "$(iconsdir)" || $(MKDIR_P) "$(DESTDIR)$(iconsdir)"
 	@list='$(icons_DATA)'; test -n "$(iconsdir)" || list=; \
-	if test -n "$$list"; then \
-	  echo " $(MKDIR_P) '$(DESTDIR)$(iconsdir)'"; \
-	  $(MKDIR_P) "$(DESTDIR)$(iconsdir)" || exit 1; \
-	fi; \
 	for p in $$list; do \
 	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
 	  echo "$$d$$p"; \
@@ -787,11 +555,8 @@
 	dir='$(DESTDIR)$(iconsdir)'; $(am__uninstall_files_from_dir)
 install-pluginDATA: $(plugin_DATA)
 	@$(NORMAL_INSTALL)
+	test -z "$(plugindir)" || $(MKDIR_P) "$(DESTDIR)$(plugindir)"
 	@list='$(plugin_DATA)'; test -n "$(plugindir)" || list=; \
-	if test -n "$$list"; then \
-	  echo " $(MKDIR_P) '$(DESTDIR)$(plugindir)'"; \
-	  $(MKDIR_P) "$(DESTDIR)$(plugindir)" || exit 1; \
-	fi; \
 	for p in $$list; do \
 	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
 	  echo "$$d$$p"; \
@@ -856,20 +621,6 @@
 	  && $(am__cd) $(top_srcdir) \
 	  && gtags -i $(GTAGS_ARGS) "$$here"
 
-cscopelist:  $(HEADERS) $(SOURCES) $(LISP)
-	list='$(SOURCES) $(HEADERS) $(LISP)'; \
-	case "$(srcdir)" in \
-	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
-	  *) sdir=$(subdir)/$(srcdir) ;; \
-	esac; \
-	for i in $$list; do \
-	  if test -f "$$i"; then \
-	    echo "$(subdir)/$$i"; \
-	  else \
-	    echo "$$sdir/$$i"; \
-	  fi; \
-	done >> $(top_builddir)/cscope.files
-
 distclean-tags:
 	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
 
@@ -903,13 +654,11 @@
 	    || exit 1; \
 	  fi; \
 	done
-@HAVE_IBUS_FALSE@check-local:
 check-am: all-am
-	$(MAKE) $(AM_MAKEFLAGS) check-local
 check: check-am
-all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(DATA)
+all-am: Makefile $(LTLIBRARIES) $(DATA)
 installdirs:
-	for dir in "$(DESTDIR)$(plugindir)" "$(DESTDIR)$(libexecdir)" "$(DESTDIR)$(iconsdir)" "$(DESTDIR)$(plugindir)"; do \
+	for dir in "$(DESTDIR)$(plugindir)" "$(DESTDIR)$(iconsdir)" "$(DESTDIR)$(plugindir)"; do \
 	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
 	done
 install: install-am
@@ -946,8 +695,8 @@
 	@echo "it deletes files that may require special tools to rebuild."
 clean: clean-am
 
-clean-am: clean-generic clean-libexecPROGRAMS clean-libtool \
-	clean-noinstPROGRAMS clean-pluginLTLIBRARIES mostlyclean-am
+clean-am: clean-generic clean-libtool clean-pluginLTLIBRARIES \
+	mostlyclean-am
 
 distclean: distclean-am
 	-rm -rf ./$(DEPDIR)
@@ -974,7 +723,7 @@
 
 install-dvi-am:
 
-install-exec-am: install-libexecPROGRAMS
+install-exec-am:
 
 install-html: install-html-am
 
@@ -1014,32 +763,27 @@
 
 ps-am:
 
-uninstall-am: uninstall-iconsDATA uninstall-libexecPROGRAMS \
-	uninstall-pluginDATA uninstall-pluginLTLIBRARIES
+uninstall-am: uninstall-iconsDATA uninstall-pluginDATA \
+	uninstall-pluginLTLIBRARIES
 
-.MAKE: check-am install-am install-strip
+.MAKE: install-am install-strip
 
-.PHONY: CTAGS GTAGS all all-am check check-am check-local clean \
-	clean-generic clean-libexecPROGRAMS clean-libtool \
-	clean-noinstPROGRAMS clean-pluginLTLIBRARIES cscopelist ctags \
-	distclean distclean-compile distclean-generic \
-	distclean-libtool distclean-tags distdir dvi dvi-am html \
-	html-am info info-am install install-am install-data \
-	install-data-am install-dvi install-dvi-am install-exec \
-	install-exec-am install-html install-html-am install-iconsDATA \
-	install-info install-info-am install-libexecPROGRAMS \
+.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
+	clean-libtool clean-pluginLTLIBRARIES ctags distclean \
+	distclean-compile distclean-generic distclean-libtool \
+	distclean-tags distdir dvi dvi-am html html-am info info-am \
+	install install-am install-data install-data-am install-dvi \
+	install-dvi-am install-exec install-exec-am install-html \
+	install-html-am install-iconsDATA install-info install-info-am \
 	install-man install-pdf install-pdf-am install-pluginDATA \
 	install-pluginLTLIBRARIES install-ps install-ps-am \
 	install-strip installcheck installcheck-am installdirs \
 	maintainer-clean maintainer-clean-generic mostlyclean \
 	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
 	pdf pdf-am ps ps-am tags uninstall uninstall-am \
-	uninstall-iconsDATA uninstall-libexecPROGRAMS \
-	uninstall-pluginDATA uninstall-pluginLTLIBRARIES
-
+	uninstall-iconsDATA uninstall-pluginDATA \
+	uninstall-pluginLTLIBRARIES
 
-@HAVE_IBUS_TRUE@check-local: test-keyboard-ibus-utils
-@HAVE_IBUS_TRUE@	$(builddir)/test-keyboard-ibus-utils > /dev/null
 
 @CSD_INTLTOOL_PLUGIN_RULE@
 
Index: sagarmatha-settings-daemon-3.6.4/plugins/keyboard/test-keyboard.c
===================================================================
--- sagarmatha-settings-daemon-3.6.4.orig/plugins/keyboard/test-keyboard.c	2013-02-18 12:57:16.535698777 +0000
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,7 +0,0 @@
-#define NEW csd_keyboard_manager_new
-#define START csd_keyboard_manager_start
-#define STOP csd_keyboard_manager_stop
-#define MANAGER CsdKeyboardManager
-#include "csd-keyboard-manager.h"
-
-#include "test-plugin.h"
Index: sagarmatha-settings-daemon-3.6.4/plugins/keyboard/test-keyboard-ibus-utils.c
===================================================================
--- sagarmatha-settings-daemon-3.6.4.orig/plugins/keyboard/test-keyboard-ibus-utils.c	2013-02-18 12:57:16.535698777 +0000
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,116 +0,0 @@
-#include "csd-keyboard-manager.c"
-
-static void
-test_make_xkb_source_id (void)
-{
-        gint i;
-        const gchar *test_strings[][2] = {
-                /* input                output */
-                { "xkb:aa:bb:cc",       "aa+bb" },
-                { "xkb:aa:bb:",         "aa+bb" },
-                { "xkb:aa::cc",         "aa" },
-                { "xkb:aa::",           "aa" },
-                { "xkb::bb:cc",         "+bb" },
-                { "xkb::bb:",           "+bb" },
-                { "xkb:::cc",           "" },
-                { "xkb:::",             "" },
-        };
-
-        for (i = 0; i < G_N_ELEMENTS (test_strings); ++i)
-                g_assert_cmpstr (make_xkb_source_id (test_strings[i][0]), ==, test_strings[i][1]);
-}
-
-static void
-test_layout_from_ibus_layout (void)
-{
-        gint i;
-        const gchar *test_strings[][2] = {
-                /* input                output */
-                { "",                   "" },
-                { "a",                  "a" },
-                { "a(",                 "a" },
-                { "a[",                 "a" },
-        };
-
-        for (i = 0; i < G_N_ELEMENTS (test_strings); ++i)
-                g_assert_cmpstr (layout_from_ibus_layout (test_strings[i][0]), ==, test_strings[i][1]);
-}
-
-static void
-test_variant_from_ibus_layout (void)
-{
-        gint i;
-        const gchar *test_strings[][2] = {
-                /* input                output */
-                { "",                   NULL },
-                { "a",                  NULL },
-                { "(",                  NULL },
-                { "()",                 "" },
-                { "(b)",                "b" },
-                { "a(",                 NULL },
-                { "a()",                "" },
-                { "a(b)",               "b" },
-        };
-
-        for (i = 0; i < G_N_ELEMENTS (test_strings); ++i)
-                g_assert_cmpstr (variant_from_ibus_layout (test_strings[i][0]), ==, test_strings[i][1]);
-}
-
-static void
-test_options_from_ibus_layout (void)
-{
-        gint i, j;
-        gchar *output_0[] = {
-                NULL
-        };
-        gchar *output_1[] = {
-                "",
-                NULL
-        };
-        gchar *output_2[] = {
-                "b",
-                NULL
-        };
-        gchar *output_3[] = {
-                "b", "",
-                NULL
-        };
-        gchar *output_4[] = {
-                "b", "c",
-                NULL
-        };
-        const gpointer tests[][2] = {
-                /* input                output */
-                { "",                   NULL },
-                { "a",                  NULL },
-                { "a[",                 output_0 },
-                { "a[]",                output_1 },
-                { "a[b]",               output_2 },
-                { "a[b,]",              output_3 },
-                { "a[b,c]",             output_4 },
-        };
-
-        for (i = 0; i < G_N_ELEMENTS (tests); ++i) {
-                if (tests[i][1] == NULL) {
-                        g_assert (options_from_ibus_layout (tests[i][0]) == NULL);
-                } else {
-                        gchar **strv_a = options_from_ibus_layout (tests[i][0]);
-                        gchar **strv_b = tests[i][1];
-
-                        g_assert (g_strv_length (strv_a) == g_strv_length (strv_b));
-                        for (j = 0; j < g_strv_length (strv_a); ++j)
-                                g_assert_cmpstr (strv_a[j], ==, strv_b[j]);
-                }
-        }
-}
-
-int
-main (void)
-{
-        test_make_xkb_source_id ();
-        test_layout_from_ibus_layout ();
-        test_variant_from_ibus_layout ();
-        test_options_from_ibus_layout ();
-
-        return 0;
-}
Index: sagarmatha-settings-daemon-3.6.4/plugins/media-keys/csd-media-keys-manager.c
===================================================================
--- sagarmatha-settings-daemon-3.6.4.orig/plugins/media-keys/csd-media-keys-manager.c	2013-02-18 12:57:16.535698777 +0000
+++ sagarmatha-settings-daemon-3.6.4/plugins/media-keys/csd-media-keys-manager.c	2013-02-18 12:57:16.531698777 +0000
@@ -103,10 +103,6 @@
 #define VOLUME_STEP 6           /* percents for one volume button press */
 #define MAX_VOLUME 65536.0
 
-#define GNOME_DESKTOP_INPUT_SOURCES_DIR "org.sagarmatha.desktop.input-sources"
-#define KEY_CURRENT_INPUT_SOURCE "current"
-#define KEY_INPUT_SOURCES        "sources"
-
 #define CSD_MEDIA_KEYS_MANAGER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), CSD_TYPE_MEDIA_KEYS_MANAGER, CsdMediaKeysManagerPrivate))
 
 typedef struct {
@@ -1990,40 +1986,6 @@
 }
 
 static void
-do_switch_input_source_action (CsdMediaKeysManager *manager,
-                               MediaKeyType         type)
-{
-        GSettings *settings;
-        GVariant *sources;
-        gint i, n;
-
-        settings = g_settings_new (GNOME_DESKTOP_INPUT_SOURCES_DIR);
-        sources = g_settings_get_value (settings, KEY_INPUT_SOURCES);
-
-        n = g_variant_n_children (sources);
-        if (n < 2)
-                goto out;
-
-        i = g_settings_get_uint (settings, KEY_CURRENT_INPUT_SOURCE);
-
-        if (type == SWITCH_INPUT_SOURCE_KEY)
-                i += 1;
-        else
-                i -= 1;
-
-        if (i < 0)
-                i = n - 1;
-        else if (i >= n)
-                i = 0;
-
-        g_settings_set_uint (settings, KEY_CURRENT_INPUT_SOURCE, i);
-
- out:
-        g_variant_unref (sources);
-        g_object_unref (settings);
-}
-
-static void
 do_custom_action (CsdMediaKeysManager *manager,
                   MediaKey            *key,
                   gint64               timestamp)
@@ -2189,10 +2151,6 @@
         case BATTERY_KEY:
                 do_execute_desktop (manager, "gnome-power-statistics.desktop", timestamp);
                 break;
-        case SWITCH_INPUT_SOURCE_KEY:
-        case SWITCH_INPUT_SOURCE_BACKWARD_KEY:
-                do_switch_input_source_action (manager, type);
-                break;
         /* Note, no default so compiler catches missing keys */
         case CUSTOM_KEY:
                 g_assert_not_reached ();
Index: sagarmatha-settings-daemon-3.6.4/plugins/media-keys/shortcuts-list.h
===================================================================
--- sagarmatha-settings-daemon-3.6.4.orig/plugins/media-keys/shortcuts-list.h	2013-02-18 12:57:16.535698777 +0000
+++ sagarmatha-settings-daemon-3.6.4/plugins/media-keys/shortcuts-list.h	2013-02-18 12:57:16.531698777 +0000
@@ -81,8 +81,6 @@
         KEYBOARD_BRIGHTNESS_DOWN_KEY,
         KEYBOARD_BRIGHTNESS_TOGGLE_KEY,
         BATTERY_KEY,
-        SWITCH_INPUT_SOURCE_KEY,
-        SWITCH_INPUT_SOURCE_BACKWARD_KEY,
         CUSTOM_KEY
 } MediaKeyType;
 
@@ -150,8 +148,6 @@
         { KEYBOARD_BRIGHTNESS_UP_KEY, NULL, "XF86KbdBrightnessUp" },
         { KEYBOARD_BRIGHTNESS_DOWN_KEY, NULL, "XF86KbdBrightnessDown" },
         { KEYBOARD_BRIGHTNESS_TOGGLE_KEY, NULL, "XF86KbdLightOnOff" },
-        { SWITCH_INPUT_SOURCE_KEY, "switch-input-source", NULL },
-        { SWITCH_INPUT_SOURCE_BACKWARD_KEY, "switch-input-source-backward", NULL },
         { BATTERY_KEY, NULL, "XF86Battery" },
 };
 
